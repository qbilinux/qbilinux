#!/bin/sh

######################################################################
url="http://downloads.sourceforge.net/libcg/libcgroup-0.41.tar.bz2"
pkgbase=libcgroup
vers=0.41
arch=`uname -m | sed 's/i.86/i586/'`
build=P1
src=$pkgbase-$vers
OPT_CONFIG=""
DOCS="INSTALL README_daemon COPYING README_systemd README"
######################################################################

fscheck() {
  PANGRAM="The quick brown fox jumps over the lazy dog."
  echo -n "Checking for the filesystem ... "
  mkdir pangram ; ( cd pangram ; touch $PANGRAM )
  mv pangram pangram~ ; mkdir pangram ; touch -r pangram~ pangram
  tar cpf pangram.tar pangram ; rmdir pangram ; mv pangram~ pangram
  for i in $PANGRAM ; do tar rpf pangram.tar pangram/$i ; done
  touch -t `date '+%m%d0900'` pangram.tar ; gzip pangram.tar
  touch pangram.tar.gz ; mv pangram.tar.gz pangram1.tgz
  tar cpf pangram.tar pangram
  touch -t `date '+%m%d0900'` pangram.tar ; gzip pangram.tar
  touch pangram.tar.gz ; mv pangram.tar.gz pangram2.tgz
  if cmp -s pangram1.tgz pangram2.tgz ; then
    echo "OK"
    rm -rf pangram pangram1.tgz pangram2.tgz
  else
    echo "NG"
    cat <<- "EOF"
	Hmm, packaging may not be done properly on this filesystem.
	Would you please try again on a default filesystem, thanks!
	
	Happy packaging!!
	
	Quitting...
	EOF
    exit
  fi
}

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in * ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`file $i | grep "not stripped"`" ] ; then
         echo "stripping -p $i"
         strip -p $i
      fi
    done
  ) fi
}

strip_libdir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in *.so *.so.* *.a ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`nm -a $i | grep " a "`" ] ; then
        if [ $i != ${i%.a} ] ; then
          echo -n "ranlib and "
          touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
        fi
        echo "stripping -gp $i"
        strip -gp $i
      fi
    done
  ) fi
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr}/$libdir ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
}

prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'\n'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0900'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
  for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/$libdir ; do prune_symlink $i ; done
  prune_symlink $infodir
  for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

fscheck
W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} ; B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build
case $arch in i586) libdir=lib ;; x86_64) libdir=lib64 ;; esac
if [ $# -eq 0 ] ; then
  opt_download=1 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    esac
  done
fi
if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
  cd $B
  cp -p src/tools/Makefile.in{,.orig}
  cat <<- "EOF" | patch src/tools/Makefile.in
	818c818,819
	< @WITH_TOOLS_TRUE@	chmod u+s $(DESTDIR)$(bindir)/cgexec
	---
	> @WITH_TOOLS_TRUE@	chgrp cgred $(DESTDIR)$(bindir)/cgexec
	> @WITH_TOOLS_TRUE@	chmod g+s $(DESTDIR)$(bindir)/cgexec
	EOF
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make clean
    fi
    if [ -f config.log ] ; then
      rm -rf config.cache config.log
    fi
    if [ -x configure ] ; then
      ./configure --prefix=/usr --libdir='${exec_prefix}'/$libdir \
          --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make install DESTDIR=$P
    fi
  done
  install -d $P/etc/rc.d/init.d
  cat <<- "EOF" > $P/etc/rc.d/init.d/cgconfig
	#!/bin/sh
	
	lockfile=/var/lock/subsys/cgconfig
	CREATE_DEFAULT=yes
	
	create_default_groups() {
	  ctrlall=`lssubsys -a | tr '\n' ',' | sed 's/,$//'`
	  controllers="" ; defaultcgroup=""
	  if [ -f /etc/cgrules.conf ] ; then
	    grep -m1 '^\*[[:space:]]\+' /etc/cgrules.conf \
	        | read user controllers defaultcgroup
	    [ "$controllers" == "*" ] && controllers=$ctrlall
	    if [ "$defaultcgroup" == "*" ] ; then
	      echo $'/etc/cgrules.conf incorrect\nOverriding it'
	      defaultcgroup=""
	    fi
	  fi
	  [ -z "$controllers" ] && controllers=$ctrlall
	  [ -z "$defaultcgroup" ] && defaultcgroup=sysdefault/
	  cgcreate -g $controllers:$defaultcgroup 2> /dev/null
	  if echo $controllers | grep -qw "cpuset" ; then
	    cgset -r cpuset.cpus=`cgget -nv -r cpuset.cpus /` $defaultcgroup
	    cgset -r cpuset.mems=`cgget -nv -r cpuset.mems /` $defaultcgroup
	  fi
	  cgclassify -g $controllers:$defaultcgroup `ps h -eLo lwp` 2> /dev/null
	}
	
	start() {
	  if [ -f $lockfile ] ; then
	    echo "lock file already exists"
	    exit 0
	  fi
	  if [ ! -f /proc/cgroups ] ; then
	    echo "kernel does not provide cgroups"
	    exit 0
	  fi
	  if ! mountpoint -q /sys/fs/cgroup ; then
	    mount -t tmpfs -o mode=0755 cgroup /sys/fs/cgroup
	  fi
	  if [ ! -s /etc/cgconfig.conf ] ; then
	    echo "/etc/cgconfig.conf is not configured"
	    exit 6
	  fi
	  if ! cgconfigparser -l /etc/cgconfig.conf ; then
	    echo "Failed to parse /etc/cgconfig.conf"
	    exit 1
	  fi
	  if [ "$CREATE_DEFAULT" == "yes" ] ; then
	    create_default_groups
	  fi
	  if ! touch $lockfile ; then
	    echo "Failed to touch $lockfile"
	    exit 1
	  fi
	}
	
	stop() {
	  cgclear
	  [ -f $lockfile ] && rm -f $lockfile
	}
	
	case "$1" in
	start)
	  start
	  ;;
	stop)
	  stop
	  ;;
	restart)
	  stop
	  start
	  ;;
	condrestart)
	  if [ -f $lockfile ] ; then
	    stop
	    start
	  fi
	  ;;
	status)
	  if [ -f $lockfile ] ; then
	    echo "Running"
	  else
	    echo "Stopped"
	    exit 3
	  fi
	  ;;
	*)
	  echo $"Usage: $0 {start|stop|restart|condrestart|status}"
	  exit 2
	  ;;
	esac
	exit 0
	EOF
  chmod 644 $P/etc/rc.d/init.d/cgconfig
  cat <<- "EOF" > $P/etc/rc.d/init.d/cgred
	#!/bin/sh
	
	lockfile=/var/lock/subsys/cgred
	pidfile=/var/run/cgred.pid
	
	start() {
	  if [ -f $lockfile ] ; then
	    echo "cgred is already running with PID `cat $pidfile`"
	    exit 0
	  fi
	  if [ ! -s /etc/cgrules.conf ] ; then
	    echo "not configured"
	    exit 6
	  fi
	  if ! grep -q "^cgroup" /proc/mounts ; then
	    echo "Cannot find cgroups, is cgconfig service running?"
	    exit 1
	  fi
	  OPTIONS=""
	  if [ -f /etc/cgred.conf ] ; then
	    . /etc/cgred.conf
	    OPTIONS="$NODAEMON $LOG"
	    if [ -n "$LOG_FILE" ] ; then
	      OPTIONS="$OPTIONS --logfile=$LOG_FILE"
	    fi
	    if [ -n "$SOCKET_USER" ] ; then
	      OPTIONS="$OPTIONS -u $SOCKET_USER"
	    fi
	    if [ -n "$SOCKET_GROUP" ] ; then
	      OPTIONS="$OPTIONS -g $SOCKET_GROUP"
	    fi
	  fi
	  cgrulesengd $OPTIONS || exit 7
	  touch $lockfile || exit 1
	  echo `pidof cgrulesengd` > $pidfile
	}
	
	stop() {
	  [ -f $pidfile ] || exit 0
	  kill -TERM `cat $pidfile` || exit 1
	  rm -f $lockfile $pidfile
	}
	
	case "$1" in
	start)
	  start
	  ;;
	stop)
	  stop
	  ;;
	restart)
	  stop
	  start
	  ;;
	condrestart)
	  if [ -f $lockfile ] ; then
	    stop
	    start
	  fi
	  ;;
	reload)
	  if [ ! -f $lockfile ] ; then
	    echo "cgred is not running."
	    exit 0
	  fi
	  kill -SIGUSR2 `cat $pidfile` || exit 1
	  ;;
	status)
	  if [ -f $lockfile ] ; then
	    echo "Running"
	  else
	    echo "Stopped"
	    exit 3
	  fi
	  ;;
	*)
	  echo $"Usage: $0 {start|stop|restart|condrestart|reload|status}"
	  exit 2
	  ;;
	esac
	exit 0
	EOF
  chmod 644 $P/etc/rc.d/init.d/cgred
  cat <<- "EOF" | unexpand > $P/etc/cgconfig.conf.dist
	mount {
	        cpuset = /sys/fs/cgroup/cpuset;
	        cpu = /sys/fs/cgroup/cpu;
	        cpuacct = /sys/fs/cgroup/cpuacct;
	        memory = /sys/fs/cgroup/memory;
	        devices = /sys/fs/cgroup/devices;
	        freezer = /sys/fs/cgroup/freezer;
	        net_cls = /sys/fs/cgroup/net_cls;
	        blkio = /sys/fs/cgroup/blkio;
	        perf_event = /sys/fs/cgroup/perf_event;
	        hugetlb = /sys/fs/cgroup/hugetlb;
	}
	EOF
  install -m 644 $B/samples/cgred.conf $P/etc/cgred.conf.dist
  install -m 644 $B/samples/cgrules.conf $P/etc/cgrules.conf.dist
  cat <<- "EOF" > $P/etc/cgsnapshot_blacklist.conf.dist
	#cgsnapshot tool configuration file
	
	#memory
	memory.force_empty
	memory.oom_control
	
	#cpu
	cpu.shares
	
	#cpuacct
	
	#devices
	
	#cpuset
	
	#ns
	
	#freezer
	
	#net_cls
	
	#blkio
	EOF
  cat <<- "EOF" > $P/etc/cgsnapshot_whitelist.conf.dist
	#cgsnapshot tool configuration file
	
	#memory
	memory.memsw.failcnt
	memory.memsw.limit_in_bytes
	memory.memsw.max_usage_in_bytes
	memory.swappiness
	memory.use_hierarchy
	memory.failcnt
	memory.soft_limit_in_bytes
	memory.limit_in_bytes
	memory.max_usage_in_bytes
	memory.move_charge_at_immigrate
	
	#cpu
	cpu.rt_runtime_us
	cpu.rt_period_us
	
	#cpuacct
	cpuacct.usage
	
	#devices
	devices.deny
	devices.allow
	devices.list
	
	#cpuset
	cpuset.memory_spread_slab
	cpuset.memory_spread_page
	cpuset.memory_migrate
	cpuset.sched_relax_domain_level
	cpuset.sched_load_balance
	cpuset.mem_hardwall
	cpuset.mem_exclusive
	cpuset.cpu_exclusive
	cpuset.mems
	cpuset.cpus
	
	#ns
	
	#freezer
	freezer.state
	
	#net_cls
	net_cls.classid
	
	#blkio
	blkio.weight
	EOF
  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et \
      -exec touch -t `date '+%m%d0900'` {} \;
  compress
  strip_libdir $P/usr/$libdir/security
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0900'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done
  convert
  cat <<- "EOF" >> $P/install/doinst.sh
	config() {
	  if [ -f etc/$1.conf ] ; then
	    rm etc/$1.conf.dist
	  else
	    mv etc/$1.conf.dist /tmp
	    mv /tmp/$1.conf.dist etc/$1.conf
	  fi
	}
	
	config cgconfig
	config cgred
	config cgrules
	config cgsnapshot_blacklist
	config cgsnapshot_whitelist
	EOF
  touch -t `date '+%m%d0900'` $P/install/doinst.sh
  tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/sbin | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/$libdir -type f`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/include -maxdepth 1 | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find etc -type f`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man5 | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man8 | tail -n+2`
  tar rvpf $pkg.tar -C $P usr/share/doc/$src
  tar rvpf $pkg.tar -C $P install/doinst.sh
  touch -t `date '+%m%d0900'` $pkg.tar ; xz $pkg.tar ; touch $pkg.tar.xz
  mv $pkg.tar.xz $pkg.txz
  read -p "Do you want to keep work files? [y/N] " ans
  if [ "x$ans" != "xY" -a "x$ans" != "xy" ] ; then rm -rf $P $C i.[se]t ; fi
fi
