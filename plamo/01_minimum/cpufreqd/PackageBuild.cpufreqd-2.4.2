#!/bin/sh

######################################################################
pkgbase=cpufreqd
vers=2.4.2
url="http://downloads.sourceforge.net/cpufreqd/cpufreqd-${vers}.tar.bz2"
arch=`uname -m`
build=T1
src=$pkgbase-$vers
patchfiles=""
OPT_CONFIG=""
DOCS="COPYING NEWS ChangeLog AUTHORS INSTALL README TODO"
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in * ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`file $i | grep "not stripped"`" ] ; then
         echo "stripping -p $i"
         strip -p $i
      fi
    done
  ) fi
}

strip_libdir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in *.so *.so.* *.a ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`nm -a $i | grep " a "`" ] ; then
        if [ $i != ${i%.a} ] ; then
          echo -n "ranlib and "
          touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
        fi
        echo "stripping -gp $i"
        strip -gp $i
      fi
    done
  ) fi
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr}/$libdir ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
}

prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'\n'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0000'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
  for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/$libdir ; do prune_symlink $i ; done
  prune_symlink $infodir
  for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

#fscheck
W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} ; B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build
case $arch in x86_64) libdir=lib64 ;; *) libdir=lib ;; esac
if [ $# -eq 0 ] ; then
  opt_download=1 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then cp ${SRC_DIR}/${i##*/} . ; fi
    if [ ! -f ${i##*/} ] ; then wget ${SRC_URL}/${i##*/} ; fi
    if [ ! -f ${i##*/} ] ; then
      wget $i ; j=${i%.*}
      for sig in asc sig{,n} {sha{256,1},md5}{,sum} ; do
        if wget --spider $i.$sig ; then wget $i.$sig ; break ; fi
        if wget --spider $j.$sig ; then
          case ${i##*.} in
          gz) gunzip -c ${i##*/} > ${j##*/} ;;
          bz2) bunzip2 -c ${i##*/} > ${j##*/} ;;
          xz) unxz -c ${i##*/} > ${j##*/} ;;
          esac
          touch -r ${i##*/} ${j##*/} ; i=$j ; wget $i.$sig ; break
        fi
      done
      if [ -f ${i##*/}.$sig ] ; then
        case $sig in
        asc|sig|sign) gpg --verify ${i##*/}.$sig ;;
        sha256|sha1|md5) ${sig}sum -c ${i##*/}.$sig ;;
        *) $sig -c ${i##*/}.$sig ;;
        esac
        if [ $? -ne 0 ] ; then echo "archive verify failed" ; exit ; fi
      fi
    fi
    if [ ! -f ${SRC_DIR}/${i##*/} ] ; then cp -p ${i##*/} ${SRC_DIR} ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xpf ${i##*/} ;;
    gz|tgz) tar xpzf ${i##*/} ;;
    bz2|tbz) tar xpjf ${i##*/} ;;
    xz|txz) tar xpJf ${i##*/} ;;
    esac
  done
fi
if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for j in ${patchfiles[$i]} ; do
      case ${j##*.} in
      gz) gunzip -c $W/$j | patch -Np1 -i - ;;
      bz2) bunzip2 -c $W/j | patch -Np1 -i - ;;
      xz) unxz -c $W/$j | patch -Np1 -i - ;;
      *) patch -Np1 -i $W/$j ;;
      esac
    done
  done
  cd $B
  cp -p src/Makefile.in{,.orig}
  sed -i 's@\<lib\>@$(libdir)@g' src/Makefile.in
  cp -p cpufreqd.conf{,.orig}
  sed -i -e 's@^#\(enable_remote\)@\1@' \
      -e 's@^#\(remote_group\)@\1@' cpufreqd.conf
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make clean
    fi
    if [ -f config.log ] ; then
      rm -rf config.cache config.log
    fi
    if [ -x configure ] ; then
      ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
          --libdir='${exec_prefix}'/$libdir --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make install DESTDIR=$P
    fi
  done
  mv $P/etc/cpufreqd.conf $C
  mv $C/cpufreqd.conf $P/etc/cpufreqd.conf.new
  cat <<- "EOF" > $P/etc/cpufreqd.conf.sample
	[General]
	pidfile=/var/run/cpufreqd.pid
	poll_interval=2
	verbosity=4
	enable_remote=1
	remote_group=root
	[/General]
	
	[sensors_plugin]
	sensors_conf=/etc/sensors3.conf
	[/sensors_plugin]
	
	[Profile]
	name=On Demand High
	minfreq=40%
	maxfreq=100%
	policy=ondemand
	[/Profile]
	
	[Profile]
	name=On Demand Low
	minfreq=20%
	maxfreq=80%
	policy=ondemand
	[/Profile]
	
	[Profile]
	name=Performance High
	minfreq=100%
	maxfreq=100%
	policy=performance
	[/Profile]
	
	[Profile]
	name=Performance Low
	minfreq=80%
	maxfreq=80%
	policy=performance
	[/Profile]
	
	[Profile]
	name=Powersave High
	minfreq=70%
	maxfreq=70%
	policy=powersave
	[/Profile]
	
	[Profile]
	name=Powersave Low
	minfreq=30%
	maxfreq=30%
	policy=powersave
	[/Profile]
	
	[Rule]
	name=Default Rule
	sensor=temp1:0-60
	cpu_interval=0-100
	profile=Performance High
	[/Rule]
	
	[Rule]
	name=CPU Too Hot
	sensor=temp1:61-100
	cpu_interval=50-100
	profile=On Demand Low
	[/Rule]
	
	EOF
  install -d $P/etc/rc.d/init.d
  cat <<- "EOF" > $P/etc/rc.d/init.d/cpufreqd
	#!/bin/sh
	
	start() {
	  for i in cpufreq_{conservative,powersave,userspace,ondemand,stats} \
	      freq_table ; do
	    modprobe $i > /dev/null 2>&1
	  done
	  for i in acpi-cpufreq mperf p4-clockmod powernow-k8 speedstep-centrino \
	      speedstep-lib ; do
	    modprobe $i > /dev/null 2>&1
	  done
	  for i in ac battery container pci_slot processor sbshc video acpi_pad \
	      button fan power_meter sbs thermal ; do
	    modprobe $i >/dev/null 2>&1
	  done
	  if [ -x /usr/sbin/cpufreqd ] ; then
	    echo $"Starting cpufreqd..."
	    cpufreqd
	  fi
	}
	
	stop() {
	  if [ -f /var/run/cpufreqd.pid ] ; then
	    echo $"Stopping cpufreqd daemon..."
	    kill `cat /var/run/cpufreqd.pid`
	    rm -f /var/run/cpufreqd.pid
	  fi
	}
	
	case "$1" in
	start)
	  start
	  ;;
	stop)
	  stop
	  ;;
	restart)
	  stop
	  sleep 3
	  start
	  ;;
	*)
	  echo $"Usage: $0 {start|stop|restart}"
	  exit 1
	  ;;
	esac
	exit 0
	EOF
  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et \
      -exec touch -t `date '+%m%d0000'` {} \;
  compress
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0000'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done
  convert
  install -d $P/install
  cat <<- "EOF" > $P/install/doinst.sh
	mv etc/cpufreqd.conf.new /tmp
	if [ -f etc/cpufreqd.conf ] ; then
	  mv /tmp/cpufreqd.conf.new etc/cpufreqd.conf.dist
	else
	  mv /tmp/cpufreqd.conf.new etc/cpufreqd.conf
	fi
	EOF
  touch -t `date '+%m%d0000'` $P/install/doinst.sh
  tar cvpf $pkg.tar -C $P `cd $P ; find usr/sbin | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/$libdir | tail -n+2`
  tar rvpf $pkg.tar -C $P etc/cpufreqd.conf.{new,sample}
  tar rvpf $pkg.tar -C $P etc/rc.d/init.d/cpufreqd
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man5 | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man8 | tail -n+2`
  tar rvpf $pkg.tar -C $P usr/share/doc/$src
  tar rvpf $pkg.tar -C $P install/doinst.sh
  touch -t `date '+%m%d0000'` $pkg.tar ; xz $pkg.tar ; touch $pkg.tar.xz
  mv $pkg.tar.xz $pkg.txz
fi
