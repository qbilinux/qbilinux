#!/bin/sh

######################################################################
pkgbase=postfix
vers=3.2.4
url="ftp://ftp.riken.jp/net/postfix/postfix-release/official/postfix-${vers}.tar.gz"
arch=`uname -m`
build=T1
src=$pkgbase-$vers
OPT_CONFIG=""
DOCS="AAAREADME COMPATIBILITY COPYRIGHT HISTORY INSTALL IPv6-ChangeLog
    LICENSE PORTING RELEASE_NOTES* TLS_* US_PATENT_6321267"
patchfiles=""
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in * ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`file $i | grep "not stripped"`" ] ; then
         echo "stripping -p $i"
         strip -p $i
      fi
    done
  ) fi
}

strip_libdir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in *.so *.so.* *.a ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`nm -a $i | grep " a "`" ] ; then
        if [ $i != ${i%.a} ] ; then
          echo -n "ranlib and "
          touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
        fi
        echo "stripping -gp $i"
        strip -gp $i
      fi
    done
  ) fi
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr}/$libdir ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
}

prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'\n'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0000'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
  for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/$libdir ; do prune_symlink $i ; done
  prune_symlink $infodir
  for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

#fscheck
W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} ; B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build
case $arch in x86_64) libdir=lib64 ;; *) libdir=lib ;; esac
if [ $# -eq 0 ] ; then
  opt_download=1 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then cp ${SRC_DIR}/${i##*/} . ; fi
    if [ ! -f ${i##*/} ] ; then wget ${SRC_URL}/${i##*/} ; fi
    if [ ! -f ${i##*/} ] ; then
      wget $i ; j=${i%.*}
      for sig in asc sig{,n} {sha{256,1},md5}{,sum} ; do
        if wget --spider $i.$sig ; then wget $i.$sig ; break ; fi
        if wget --spider $j.$sig ; then
          case ${i##*.} in
          gz) gunzip -c ${i##*/} > ${j##*/} ;;
          bz2) bunzip2 -c ${i##*/} > ${j##*/} ;;
          xz) unxz -c ${i##*/} > ${j##*/} ;;
          esac
          touch -r ${i##*/} ${j##*/} ; i=$j ; wget $i.$sig ; break
        fi
      done
      if [ -f ${i##*/}.$sig ] ; then
        case $sig in
        asc|sig|sign) gpg --verify ${i##*/}.$sig ;;
        sha256|sha1|md5) ${sig}sum -c ${i##*/}.$sig ;;
        *) $sig -c ${i##*/}.$sig ;;
        esac
        if [ $? -ne 0 ] ; then echo "archive verify failed" ; exit ; fi
      fi
    fi
    if [ ! -f ${SRC_DIR}/${i##*/} ] ; then cp -p ${i##*/} ${SRC_DIR} ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xpf ${i##*/} ;;
    gz|tgz) tar xpzf ${i##*/} ;;
    bz2|tbz) tar xpjf ${i##*/} ;;
    xz|txz) tar xpJf ${i##*/} ;;
    esac
  done
fi
if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for j in ${patchfiles[$i]} ; do
      case ${j##*.} in
      gz) gunzip -c $W/$j | patch -Np1 -i - ;;
      bz2) bunzip2 -c $W/j | patch -Np1 -i - ;;
      xz) unxz -c $W/$j | patch -Np1 -i - ;;
      *) patch -Np1 -i $W/$j ;;
      esac
    done
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make clean
    fi
    if [ -f config.log ] ; then
      rm -rf config.cache config.log
    fi
    if [ -x configure ] ; then
      ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
          --libdir='${exec_prefix}'/$libdir --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
  done
  cp -p conf/postfix-files{,.orig}
  cat <<- "EOF" >> conf/postfix-files
	$command_directory/smtp-source:f:root:root:-:755
	$command_directory/smtp-sink:f:root:root:-:755
	$command_directory/qmqp-source:f:root:root:-:755
	$command_directory/qmqp-sink:f:root:root:-:755
EOF
  make makefiles CCARGS="-DNO_NIS -DUSE_SASL_AUTH -DUSE_CYRUS_SASL \
      -DUSE_TLS -I/usr/include/sasl" AUXLIBS="-lsasl2 -lssl -lcrypto"
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    false && if [ -f Makefile ] ; then
      make install DESTDIR=$P
    fi
  done
  sh postfix-install -non-interactive -package install_root=$P \
      html_directory=/usr/share/doc/postfix/html \
      manpage_directory=/usr/share/man \
      readme_directory=/usr/share/doc/postfix/README_FILES
  install -d $P/usr/lib
  ln -s /usr/sbin/sendmail $P/usr/lib
  for i in access aliases canonical generic \
      header_checks main.cf master.cf relocated transport virtual ; do
    mv $P/etc/postfix/$i{,.new}
  done
  mv $P/etc/postfix/{{access,aliases}.new,bounce.cf.default,canonical.new} $C
  mv $P/etc/postfix/{{generic,header_checks}.new,main.cf.default} $C
  mv $P/etc/postfix/{main.cf.new,makedefs.out,{master.cf,relocated}.new} $C
  mv $P/etc/postfix/{transport,virtual}.new $C
  mv $C/{{access,aliases}.new,bounce.cf.default,canonical.new} $P/etc/postfix
  mv $C/{{generic,header_checks}.new,main.cf.default} $P/etc/postfix
  mv $C/{main.cf.new,makedefs.out,{master.cf,relocated}.new} $P/etc/postfix
  mv $C/{transport,virtual}.new $P/etc/postfix
  sed -i "/^\(html\|readme\)_directory/s@postfix@$src@" \
      $P/etc/postfix/main.cf.new
  cat <<- "EOF" >> $P/etc/postfix/main.cf.new
	
	# Plamo local configurations (for fml and SMTP auth with SASL2)
	alias_maps = hash:/etc/aliases
	allow_mail_to_commands = alias,forward,include
	smtpd_recipient_limit = 5000
	
	#smtpd_sasl_auth_enable = yes
	#smtpd_sasl_local_domain =
	#smtpd_sasl_authenticated_header = yes
	#smtpd_recipient_restrictions =
	#	permit_mynetworks
	#	permit_sasl_authenticated
	#	reject_unauth_destination
	## for Cyrus SASL
	#smtpd_sasl_path = smtpd
	#smtp_sasl_password_maps = hash:/etc/postfix/sasl_password
	## for Dovecot SASL
	#smtpd_sasl_type = dovecot
	#data_directory = /var/lib/postfix
EOF
  sed -i 's@^#\(submission\)@\1@' $P/etc/postfix/master.cf.new
  install -m 644 proto/aliases0 $P/etc/aliases.new
  install -d $P/etc/rc.d/init.d
  ln -s /usr/sbin/postfix $P/etc/rc.d/init.d
  for i in active bounce corrupt defer deferred flush \
      hold incoming private maildrop public saved trace ; do
    chown postfix $P/var/spool/postfix/$i
  done
  chgrp postdrop $P/var/spool/postfix/{maildrop,public}
  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et \
      -exec touch -t `date '+%m%d0000'` {} \;
  compress
  strip_bindir $P/usr/libexec/postfix
  touch -t `date '+%m%d0000'` $P/usr/libexec/postfix
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0000'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done
  mv $docdir/postfix/html $docdir/$src
  mv $docdir/postfix/README_FILES $docdir/$src
  mv $docdir/$src/{README_FILES,{RELEASE_NOTES*,TLS_*}.gz} $C
  mv $docdir/$src/{US_PATENT_6321267.gz,html,$myname.gz} $C
  mv $C/{README_FILES,{RELEASE_NOTES*,TLS_*}.gz} $docdir/$src
  mv $C/{US_PATENT_6321267.gz,html,$myname.gz} $docdir/$src
  touch -r $S $docdir/$src
  convert
  prune_symlink $P/usr/lib
  prune_symlink $P/etc/rc.d/init.d
  cat <<- "EOF" >> $P/install/doinst.sh
	
	postfix_config() {
	  mv etc/postfix/$1.new /tmp
	  if [ -f etc/postfix/$1 ] ; then
	    mv /tmp/$1.new etc/postfix/$1.dist
	  else
	    mv /tmp/$1.new etc/postfix/$1
	  fi
	}
	
	for i in access aliases canonical generic \
	    header_checks main.cf master.cf relocated transport virtual ; do
	  postfix_config $i
	done
	mv etc/aliases.new /tmp
	if [ -f etc/aliases ] ; then
	  mv /tmp/aliases.new etc/aliases.dist
	else
	  mv /tmp/aliases.new etc/aliases
	fi
EOF
  cat <<- EOF | sed 's/^|//' >> $P/install/doinst.sh
	|#%% begin initialize $pkg
	|if ! grep -q submission /etc/services ; then
	|  cat <<- "EOF" >> /etc/services
	|	submission	587/tcp
	|	submission	587/udp
	|	EOF
	|fi
	|if ps ax | grep inetd | grep -vq grep ; then
	|  killall -HUP inetd
	|fi
	|postfix upgrade-configuration
	|postfix set-permissions
	|[ -f /etc/aliases.db ] || newaliases
	|#%% end
EOF
  touch -t `date '+%m%d0000'` $P/install/doinst.sh
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
