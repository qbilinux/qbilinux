--- ./src/gallium/drivers/nouveau/codegen/nv50_ir_ra.cpp
+++ ./src/gallium/drivers/nouveau/codegen/nv50_ir_ra.cpp
@@ -25,23 +25,23 @@
 
 #include <stack>
 #include <limits>
-#if __cplusplus >= 201103L
+// #if __cplusplus >= 201103L
 #include <unordered_map>
-#else
-#include <tr1/unordered_map>
-#endif
+// #else
+// #include <tr1/unordered_map>
+// #endif
 
 namespace nv50_ir {
 
-#if __cplusplus >= 201103L
+// #if __cplusplus >= 201103L
 using std::hash;
 using std::unordered_map;
-#elif !defined(ANDROID)
-using std::tr1::hash;
-using std::tr1::unordered_map;
-#else
-#error Android release before Lollipop is not supported!
-#endif
+// #elif !defined(ANDROID)
+// using std::tr1::hash;
+// using std::tr1::unordered_map;
+// #else
+// #error Android release before Lollipop is not supported!
+// #endif
 
 #define MAX_REGISTER_FILE_SIZE 256
 
diff -upr /mnt/Srcs/M/Mesa/11.0.5/mesa-11.0.5/src/gallium/drivers/nouveau/codegen/unordered_set.h codegen/unordered_set.h
--- ./src/gallium/drivers/nouveau/codegen/unordered_set.h	2015-10-24 00:02:24.000000000 +0900
+++ ./src/gallium/drivers/nouveau/codegen/unordered_set.h	2015-11-18 20:05:53.038788137 +0900
@@ -1,47 +1,47 @@
 #ifndef __NV50_UNORDERED_SET_H__
 #define __NV50_UNORDERED_SET_H__
 
-#if (__cplusplus >= 201103L) || defined(ANDROID)
+// #if (__cplusplus >= 201103L) || defined(ANDROID)
 #include <unordered_set>
-#else
-#include <tr1/unordered_set>
-#endif
+// #else
+// #include <tr1/unordered_set>
+// #endif
 
 namespace nv50_ir {
 
-#if __cplusplus >= 201103L
+// #if __cplusplus >= 201103L
 using std::unordered_set;
-#elif !defined(ANDROID)
-using std::tr1::unordered_set;
-#else // Android release before lollipop
-using std::isfinite;
-typedef std::tr1::unordered_set<void *> voidptr_unordered_set;
-
-template <typename V>
-class unordered_set : public voidptr_unordered_set {
-  public:
-    typedef voidptr_unordered_set _base;
-    typedef _base::iterator _biterator;
-    typedef _base::const_iterator const_biterator;
-
-    class iterator : public _biterator {
-      public:
-        iterator(const _biterator & i) : _biterator(i) {}
-        V operator*() const { return reinterpret_cast<V>(*_biterator(*this)); }
-    };
-    class const_iterator : public const_biterator {
-      public:
-        const_iterator(const iterator & i) : const_biterator(i) {}
-        const_iterator(const const_biterator & i) : const_biterator(i) {}
-        const V operator*() const { return reinterpret_cast<const V>(*const_biterator(*this)); }
-    };
-
-    iterator begin() { return _base::begin(); }
-    iterator end() { return _base::end(); }
-    const_iterator begin() const { return _base::begin(); }
-    const_iterator end() const { return _base::end(); }
-};
-#endif
+// #elif !defined(ANDROID)
+// using std::tr1::unordered_set;
+// #else // Android release before lollipop
+// using std::isfinite;
+// typedef std::tr1::unordered_set<void *> voidptr_unordered_set;
+// 
+// template <typename V>
+// class unordered_set : public voidptr_unordered_set {
+//   public:
+//     typedef voidptr_unordered_set _base;
+//     typedef _base::iterator _biterator;
+//     typedef _base::const_iterator const_biterator;
+// 
+//     class iterator : public _biterator {
+//       public:
+//         iterator(const _biterator & i) : _biterator(i) {}
+//         V operator*() const { return reinterpret_cast<V>(*_biterator(*this)); }
+//     };
+//     class const_iterator : public const_biterator {
+//       public:
+//         const_iterator(const iterator & i) : const_biterator(i) {}
+//         const_iterator(const const_biterator & i) : const_biterator(i) {}
+//         const V operator*() const { return reinterpret_cast<const V>(*const_biterator(*this)); }
+//     };
+// 
+//     iterator begin() { return _base::begin(); }
+//     iterator end() { return _base::end(); }
+//     const_iterator begin() const { return _base::begin(); }
+//     const_iterator end() const { return _base::end(); }
+// };
+//  #endif
 
 } // namespace nv50_ir
 
