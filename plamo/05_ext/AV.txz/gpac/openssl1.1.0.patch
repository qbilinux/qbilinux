*** gpac-0.7.1/src/utils/downloader.c.orig	2017-04-26 20:33:17.000000000 +0900
--- gpac-0.7.1/src/utils/downloader.c	2018-07-14 16:19:17.216452833 +0900
***************
*** 138,145 ****
--- 138,147 ----
  	u32 flags;
  	u32 total_size, bytes_done, icy_metaint, icy_count, icy_bytes;
  	u64 start_time;
+ 	u64 chunk_run_time;
  	u32 bytes_per_sec;
  	u64 start_time_utc;
+ 	Bool last_chunk_found;
  	Bool connection_close;
  	Bool is_range_continuation;
  	/*0: no cache reconfig before next GET request: 1: try to rematch the cache entry: 2: force to create a new cache entry (for byte-range cases)*/
***************
*** 202,208 ****
  	u32 limit_data_rate, read_buf_size;
  	u64 max_cache_size;
  	Bool allow_broken_certificate;
! 	
  	GF_List *skip_proxy_servers;
  	GF_List *credentials;
  	GF_List *cache_entries;
--- 204,210 ----
  	u32 limit_data_rate, read_buf_size;
  	u64 max_cache_size;
  	Bool allow_broken_certificate;
! 
  	GF_List *skip_proxy_servers;
  	GF_List *credentials;
  	GF_List *cache_entries;
***************
*** 390,399 ****
--- 392,409 ----
  		GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("[HTTPS] Error while initializing Random Number generator, failed to init SSL !\n"));
  		return GF_TRUE;
  	}
+ 
+ 	/* per https://www.openssl.org/docs/man1.1.0/ssl/OPENSSL_init_ssl.html
+ 	** As of version 1.1.0 OpenSSL will automatically allocate all resources that it needs so no explicit initialisation is required.
+ 	** Similarly it will also automatically deinitialise as required.
+ 	*/
+ #if OPENSSL_VERSION_NUMBER < 0x10100000L
  	SSL_library_init();
  	SSL_load_error_strings();
  	SSLeay_add_all_algorithms();
  	SSLeay_add_ssl_algorithms();
+ #endif
+ 
  	_ssl_is_initialized = GF_TRUE;
  	GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[HTTPS] Initalization of SSL library complete.\n"));
  	return GF_FALSE;
***************
*** 420,425 ****
--- 430,436 ----
  	}
  
  	switch (mode) {
+ #if OPENSSL_VERSION_NUMBER < 0x10100000L
  	case 0:
  		meth = SSLv23_client_method();
  		break;
***************
*** 434,439 ****
--- 445,455 ----
  	case 3:
  		meth = TLSv1_client_method();
  		break;
+ #else /* for openssl 1.1+ this is the prefered method */
+ 	case 0:
+ 		meth = TLS_client_method();
+ 		break;
+ #endif
  	default:
  		goto error;
  	}
***************
*** 769,775 ****
  		gf_sk_del(sess->sock);
  	gf_list_del(sess->headers);
  	gf_mx_del(sess->mx);
! 	
  	gf_free(sess);
  	GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[Downloader] gf_dm_sess_del(%p) : DONE\n", sess ));
  }
--- 785,791 ----
  		gf_sk_del(sess->sock);
  	gf_list_del(sess->headers);
  	gf_mx_del(sess->mx);
! 
  	gf_free(sess);
  	GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[Downloader] gf_dm_sess_del(%p) : DONE\n", sess ));
  }
***************
*** 1003,1008 ****
--- 1019,1027 ----
  	else if (sess->status>GF_NETIO_DISCONNECTED)
  		socket_changed = GF_TRUE;
  
+ 	assert(sess->status != GF_NETIO_WAIT_FOR_REPLY);
+ 	assert(sess->status != GF_NETIO_DATA_EXCHANGE);
+ 
  	//strip fragment
  	sep_frag = strchr(url, '#');
  	if (sep_frag) sep_frag[0]=0;
***************
*** 1097,1102 ****
--- 1116,1122 ----
  	}
  	sess->total_size=0;
  	sess->bytes_done=0;
+ 	assert(sess->remaining_data_size==0);
  	return sess->last_error;
  }
  
***************
*** 1139,1145 ****
  {
  	GF_DownloadSession *sess;
  	if (!dm) return NULL;
! 	
  	GF_SAFEALLOC(sess, GF_DownloadSession);
  	if (!sess) {
  		GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("%s:%d Cannot allocate session for URL %s: OUT OF MEMORY!\n", __FILE__, __LINE__, url));
--- 1159,1165 ----
  {
  	GF_DownloadSession *sess;
  	if (!dm) return NULL;
! 
  	GF_SAFEALLOC(sess, GF_DownloadSession);
  	if (!sess) {
  		GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("%s:%d Cannot allocate session for URL %s: OUT OF MEMORY!\n", __FILE__, __LINE__, url));
***************
*** 1160,1167 ****
  		gf_free(sess);
  		return NULL;
  	}
! 	
! 	
  	assert( dm );
  
  	*e = gf_dm_sess_setup_from_url(sess, url);
--- 1180,1187 ----
  		gf_free(sess);
  		return NULL;
  	}
! 
! 
  	assert( dm );
  
  	*e = gf_dm_sess_setup_from_url(sess, url);
***************
*** 1219,1225 ****
  		gf_mx_v(sess->mx);
  		return GF_IP_CONNECTION_CLOSED;
  	}
! 	
  #ifdef GPAC_HAS_SSL
  	if (sess->ssl) {
  		s32 size;
--- 1239,1245 ----
  		gf_mx_v(sess->mx);
  		return GF_IP_CONNECTION_CLOSED;
  	}
! 
  #ifdef GPAC_HAS_SSL
  	if (sess->ssl) {
  		s32 size;
***************
*** 1391,1398 ****
  		sess->status = GF_NETIO_CONNECTED;
  		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[HTTP] Connected to %s:%d\n", proxy, proxy_port));
  		gf_dm_sess_notify_state(sess, GF_NETIO_CONNECTED, GF_OK);
! 		gf_sk_set_buffer_size(sess->sock, GF_TRUE, GF_DOWNLOAD_BUFFER_SIZE);
! 		gf_sk_set_buffer_size(sess->sock, GF_FALSE, GF_DOWNLOAD_BUFFER_SIZE);
  	}
  
  #ifdef GPAC_HAS_SSL
--- 1411,1418 ----
  		sess->status = GF_NETIO_CONNECTED;
  		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[HTTP] Connected to %s:%d\n", proxy, proxy_port));
  		gf_dm_sess_notify_state(sess, GF_NETIO_CONNECTED, GF_OK);
! //		gf_sk_set_buffer_size(sess->sock, GF_TRUE, GF_DOWNLOAD_BUFFER_SIZE);
! //		gf_sk_set_buffer_size(sess->sock, GF_FALSE, GF_DOWNLOAD_BUFFER_SIZE);
  	}
  
  #ifdef GPAC_HAS_SSL
***************
*** 1445,1451 ****
  							const GENERAL_NAME *altname = sk_GENERAL_NAME_value(altnames, i);
  							if (altname->type == GEN_DNS)
  							{
! 								unsigned char *altname_str = ASN1_STRING_data(altname->d.ia5);
  								gf_list_add(valid_names, altname_str);
  							}
  						}
--- 1465,1475 ----
  							const GENERAL_NAME *altname = sk_GENERAL_NAME_value(altnames, i);
  							if (altname->type == GEN_DNS)
  							{
! 								#if OPENSSL_VERSION_NUMBER < 0x10100000L
! 									unsigned char *altname_str = ASN1_STRING_data(altname->d.ia5);
! 								#else
! 									unsigned char *altname_str = (unsigned char *)ASN1_STRING_get0_data(altname->d.ia5);
! 								#endif
  								gf_list_add(valid_names, altname_str);
  							}
  						}
***************
*** 1800,1806 ****
  		dm->limit_data_rate = 1000 * atoi(opt) / 8;
  	else
  		gf_cfg_set_key(cfg, "Downloader", "MaxRate", "0");
! 	
  
  	dm->read_buf_size = GF_DOWNLOAD_BUFFER_SIZE;
  	//when rate is limited, use smaller smaller read size
--- 1824,1830 ----
  		dm->limit_data_rate = 1000 * atoi(opt) / 8;
  	else
  		gf_cfg_set_key(cfg, "Downloader", "MaxRate", "0");
! 
  
  	dm->read_buf_size = GF_DOWNLOAD_BUFFER_SIZE;
  	//when rate is limited, use smaller smaller read size
***************
*** 1821,1827 ****
  			dm->allow_offline_cache = GF_TRUE;
  	}
  
! 	dm->allow_offline_cache = GF_FALSE;
  	if (cfg) {
  		opt = gf_cfg_get_key(cfg, "Downloader", "CleanCache");
  		if (opt) {
--- 1845,1852 ----
  			dm->allow_offline_cache = GF_TRUE;
  	}
  
! 	dm->clean_cache = GF_FALSE;
! 	dm->allow_broken_certificate = GF_FALSE;
  	if (cfg) {
  		opt = gf_cfg_get_key(cfg, "Downloader", "CleanCache");
  		if (opt) {
***************
*** 2027,2033 ****
  }
  
  
! static char *gf_dm_get_chunk_data(GF_DownloadSession *sess, char *body_start, u32 *payload_size, u32 *header_size)
  {
  	u32 size;
  	s32 res;
--- 2052,2058 ----
  }
  
  
! static char *gf_dm_get_chunk_data(GF_DownloadSession *sess, Bool first_chunk_in_payload, char *body_start, u32 *payload_size, u32 *header_size)
  {
  	u32 size;
  	s32 res;
***************
*** 2057,2062 ****
--- 2082,2092 ----
  		if ((body_start[0]=='\r') && (body_start[1]=='\n')) {
  			body_start += 2;
  			*header_size = 2;
+ 			//chunk exactly ends our packet, reset session start time
+ 			if (*payload_size == 2) {
+ 				sess->chunk_run_time += gf_sys_clock_high_res() - sess->start_time;
+ 				sess->start_time = 0;
+ 			}
  		}
  		if (*payload_size <= 4) {
  			*header_size = 0;
***************
*** 2067,2072 ****
--- 2097,2112 ----
  		//not enough bytes to read CRLF, don't bother parsing
  		te_header = NULL;
  	}
+ 
+ 	//start of a new chunk, update start time
+ 	if (!sess->start_time) {
+ 		sess->start_time = gf_sys_clock_high_res();
+ 		//assume RTT is session reply time, and that chunk transfer started RTT/2 ago
+ 		if (first_chunk_in_payload && sess->start_time > sess->reply_time/2)
+ 			sess->start_time -= sess->reply_time/2;
+ 		GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[HTTP] First byte in chunk received (%d bytes in packet), new start time %u ms\n", *payload_size, (u32) sess->start_time/1000));
+ 	}
+ 
  	//cannot parse now, copy over the bytes
  	if (!te_header) {
  		*header_size = 0;
***************
*** 2095,2113 ****
  	GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[HTTP] Chunk Start: Header \"%s\" - header size %d - payload size %d at UTC "LLD"\n", body_start, 2+strlen(body_start), size, gf_net_get_utc()));
  
  	te_header[0] = '\r';
  	return te_header+2;
  }
  
  
  static void dm_sess_update_download_rate(GF_DownloadSession * sess, Bool always_check)
  {
! 	u32 runtime;
  	if (!always_check && (sess->bytes_done==sess->total_size)) return;
  
  	/*update state*/
! 	runtime = (u32) (gf_sys_clock_high_res() - sess->start_time) / 1000;
  	if (!runtime) runtime=1;
! 	sess->bytes_per_sec = (u32) (1000 * (u64) sess->bytes_done / runtime);
  }
  
  
--- 2135,2164 ----
  	GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[HTTP] Chunk Start: Header \"%s\" - header size %d - payload size %d at UTC "LLD"\n", body_start, 2+strlen(body_start), size, gf_net_get_utc()));
  
  	te_header[0] = '\r';
+ 	if (!size) sess->last_chunk_found = GF_TRUE;
  	return te_header+2;
  }
  
  
  static void dm_sess_update_download_rate(GF_DownloadSession * sess, Bool always_check)
  {
! 	u64 runtime;
  	if (!always_check && (sess->bytes_done==sess->total_size)) return;
  
  	/*update state*/
! 	runtime = sess->chunk_run_time;
! 	if (sess->start_time) {
! 		runtime += (gf_sys_clock_high_res() - sess->start_time);
! 	}
  	if (!runtime) runtime=1;
! 
! 	sess->bytes_per_sec = (u32) ((1000000 * (u64) sess->bytes_done) / runtime);
! 
! 	if (sess->chunked) {
! 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[HTTP] bandwidth estimation: download time "LLD" us (chunk download time "LLD" us) - bytes %u - rate %u kbps\n", runtime, sess->chunk_run_time, sess->bytes_done, sess->bytes_per_sec*8/1000));
! 	} else {
! 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[HTTP] bandwidth estimation: download time "LLD" us - bytes %u - rate %u kbps\n", runtime, sess->bytes_done, sess->bytes_per_sec*8/1000));
! 	}
  }
  
  
***************
*** 2115,2120 ****
--- 2166,2172 ----
  {
  	u32 nbBytes, remaining, hdr_size;
  	u8 *data;
+ 	Bool first_chunk_in_payload = GF_TRUE;
  	Bool flush_chunk = GF_FALSE;
  	GF_NETIO_Parameter par;
  
***************
*** 2124,2130 ****
  	if (!payload)
  		return; //nothing to do
  	if (sess->chunked) {
!  		data = (u8 *) gf_dm_get_chunk_data(sess, (char *) payload, &nbBytes, &hdr_size);
  		if (!hdr_size && !data) {
  			/* keep the data and wait for the rest */
  			if (sess->remaining_data) gf_free(sess->remaining_data);
--- 2176,2183 ----
  	if (!payload)
  		return; //nothing to do
  	if (sess->chunked) {
!  		data = (u8 *) gf_dm_get_chunk_data(sess, first_chunk_in_payload, (char *) payload, &nbBytes, &hdr_size);
! 		first_chunk_in_payload = GF_FALSE;
  		if (!hdr_size && !data) {
  			/* keep the data and wait for the rest */
  			if (sess->remaining_data) gf_free(sess->remaining_data);
***************
*** 2146,2152 ****
  			flush_chunk = GF_TRUE;
  		}
  		/*chunk transfer is done*/
! 		if (!nbBytes) {
  			sess->total_size = sess->bytes_done;
  		}
  	} else {
--- 2199,2205 ----
  			flush_chunk = GF_TRUE;
  		}
  		/*chunk transfer is done*/
! 		if (sess->last_chunk_found) {
  			sess->total_size = sess->bytes_done;
  		}
  	} else {
***************
*** 2160,2166 ****
  		sess->init_data_size += nbBytes;
  	}
  
! 
  	if (nbBytes && !sess->remaining_data_size) {
  		sess->bytes_done += nbBytes;
  		dm_sess_update_download_rate(sess, GF_TRUE);
--- 2213,2219 ----
  		sess->init_data_size += nbBytes;
  	}
  
! 	//we have some new bytes received
  	if (nbBytes && !sess->remaining_data_size) {
  		sess->bytes_done += nbBytes;
  		dm_sess_update_download_rate(sess, GF_TRUE);
***************
*** 2186,2192 ****
  		}
  
  	}
! 
  	if (sess->total_size && (sess->bytes_done == sess->total_size)) {
  		gf_dm_disconnect(sess, GF_FALSE);
  		par.msg_type = GF_NETIO_DATA_TRANSFERED;
--- 2239,2245 ----
  		}
  
  	}
! 	//and we're done
  	if (sess->total_size && (sess->bytes_done == sess->total_size)) {
  		gf_dm_disconnect(sess, GF_FALSE);
  		par.msg_type = GF_NETIO_DATA_TRANSFERED;
***************
*** 2200,2208 ****
  		gf_dm_sess_user_io(sess, &par);
  		sess->total_time_since_req = (u32) (gf_sys_clock_high_res() - sess->request_start_time);
  
! 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[HTTP] url %s downloaded in "LLU" us (%d kbps) (%d us since request - got response in %d us)\n", gf_cache_get_url(sess->cache_entry),
! 		                                     gf_sys_clock_high_res() - sess->start_time, 8*sess->bytes_per_sec/1024, sess->total_time_since_req, sess->reply_time ));
! 		
  		if (sess->chunked && (payload_size==2))
  			payload_size=0;
  	}
--- 2253,2261 ----
  		gf_dm_sess_user_io(sess, &par);
  		sess->total_time_since_req = (u32) (gf_sys_clock_high_res() - sess->request_start_time);
  
! 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[HTTP] url %s (%d bytes) downloaded in "LLU" us (%d kbps) (%d us since request - got response in %d us)\n", gf_cache_get_url(sess->cache_entry), sess->bytes_done,
! 		                                     gf_sys_clock_high_res() - sess->start_time, 8*sess->bytes_per_sec/1000, sess->total_time_since_req, sess->reply_time ));
! 
  		if (sess->chunked && (payload_size==2))
  			payload_size=0;
  	}
***************
*** 2216,2224 ****
  	if (!sess->nb_left_in_chunk && remaining) {
  		sess->nb_left_in_chunk = remaining;
  	} else if (payload_size) {
- 		if (sess->chunked && (payload_size==2))
- 			payload_size=2;
- 	
  		gf_dm_data_received(sess, payload, payload_size, store_in_init, rewrite_size);
  	}
  }
--- 2269,2274 ----
***************
*** 2358,2363 ****
--- 2408,2415 ----
  
  	gf_dm_clear_headers(sess);
  
+ 	assert(sess->remaining_data_size == 0);
+ 
  	if (sess->needs_cache_reconfig) {
  		gf_dm_configure_cache(sess);
  		sess->needs_cache_reconfig = 0;
***************
*** 2794,2799 ****
--- 2846,2854 ----
  	sess->start_time = gf_sys_clock_high_res();
  	sess->start_time_utc = gf_net_get_utc();
  	sess->chunked = GF_FALSE;
+ 	sess->chunk_run_time = 0;
+ 	sess->last_chunk_found = GF_FALSE;
+ 	gf_sk_reset(sess->sock);
  
  	while (1) {
  		e = gf_dm_read_data(sess, sHTTP + bytesRead, buf_size - bytesRead, &res);
***************
*** 2805,2810 ****
--- 2860,2866 ----
  					sess->status = GF_NETIO_STATE_ERROR;
  					return GF_IP_NETWORK_EMPTY;
  				}
+ 				assert(res==0);
  				return GF_OK;
  			}
  			continue;
***************
*** 2825,2831 ****
  			}
  			return e;
  		case GF_OK:
! 			if (!res) return GF_OK;
  			break;
  		default:
  			goto exit;
--- 2881,2888 ----
  			}
  			return e;
  		case GF_OK:
! 			if (!res)
! 				return GF_OK;
  			break;
  		default:
  			goto exit;
***************
*** 2904,2910 ****
  			hdrp->value = gf_strdup(hdr_val);
  			gf_list_add(sess->headers, hdrp);
  		}
! 	
  		if (sep) sep[0]=':';
  		if (hdr_sep) hdr_sep[0] = '\r';
  	}
--- 2961,2967 ----
  			hdrp->value = gf_strdup(hdr_val);
  			gf_list_add(sess->headers, hdrp);
  		}
! 
  		if (sep) sep[0]=':';
  		if (hdr_sep) hdr_sep[0] = '\r';
  	}
