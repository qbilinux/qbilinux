#!/bin/sh
##############################################################
url='http://download.qt-project.org/official_releases/qt/4.8/4.8.6/qt-everywhere-opensource-src-4.8.6.tar.gz'
pkgbase=qt
vers=4.8.6
arch=x86_64
# arch=i586
build=P1
src=qt-everywhere-opensource-src-4.8.6
OPT_CONFIG='-reduce-exports -release -nomake examples -nomake demos -system-sqlite -no-nis -opensource -confirm-license -no-phonon -no-phonon-backend -gstreamer -qt-sql-mysql -plugin-sql-mysql -qt-sql-sqlite -plugin-sql-sqlite  -I/opt/mysql/include -I/opt/pgsql/include -L/opt/pgsql/lib -L/opt/mysql/lib'
DOCS='.LICENSE-ALLOS .LICENSE-ALLOS-US .LICENSE-DESKTOP .LICENSE-DESKTOP-US .LICENSE-EMBEDDED .LICENSE-EMBEDDED-US .LICENSE-EVALUATION .LICENSE-EVALUATION-US INSTALL LGPL_EXCEPTION.txt LICENSE.FDL LICENSE.GPL3 LICENSE.LGPL README'
patchfiles=''
if [ "$arch" = "x86_64" ]; then
    OPT_CONFIG=$OPT_CONFIG" -prefix /usr/lib64/qt -libdir /usr/lib64 -L /opt/mysql/lib64"    
else
    OPT_CONFIG=$OPT_CONFIG" -prefix /usr/lib/qt -libdir /usr/lib -L /opt/mysql/lib"
fi    
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

W=`pwd`
WD=/home/kojima/Build
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$WD/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$WD/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
    target="-m64"
    libdir="lib64"
    suffix="64"
else
    target="-m32"
    libdir="lib"
    suffix=""
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    esac
  done
fi

if [ $opt_config -eq 1 ] ; then
   for i in `seq 0 $((${#B[@]} - 1))` ; do
     if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
   done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    sed -i '/-Werror/d' src/3rdparty/webkit/Source/WebKit.pri
    sed -i -e "/#if/d" -e "/#error/d" -e "/#endif/d"  config.tests/unix/libmng/libmng.cpp
    # Fix DoS vulnerability in the GIF image handler: (from LFS)
    sed -i -e '631a if (image->isNull()) { state = Error; return -1; }'  src/gui/image/qgifhandler.cpp

      if [ -x configure ] ; then
         export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
         export LDFLAGS='-Wl,--as-needed' 
         # export CFLAGS='-Os'
         # export CXXLAGS='-Os'
	 #if [ -x /usr/bin/clang -a -x /usr/bin/clang++ ]; then
	 #    export CC="clang"
	 #    export CXX="clang++"
	 #else
             export CC="gcc -isystem /usr/include $target"
             export CXX="g++ -isystem /usr/include $target"
	 #fi
         ./configure -bindir /usr/bin  -docdir /usr/share/${src} -headerdir /usr/include $OPT_CONFIG
     fi
      if [ $? != 0 ]; then
	  echo "configure error. $0 script stop"
	  exit 255
      fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      export CFLAGS='-Os'
      export CXXLAGS='-Os'
      make -j6
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make install INSTALL_ROOT=$P
    fi
    mkdir -p $P/usr/${libdir}/qt/bin
    ( cd $P/usr/${libdir}/qt/bin ; ln -sf /usr/bin/moc moc )

  # make place for forthcoming Qt5
  for cmd in qtconfig assistant designer linguist qdbusviewer ; do
      ( cd $P/usr/bin ; mv $cmd "${cmd}-qt4" )
  done

  # Qt icons(from BLFS)
    mkdir -p $P/usr/share/pixmaps
    install -v -Dm644 src/gui/dialogs/images/qtlogo-64.png  $P/usr/share/pixmaps/qt4logo.png
    install -v -Dm644 tools/assistant/tools/assistant/images/assistant-128.png  $P/usr/share/pixmaps/assistant-qt4.png 
    install -v -Dm644 tools/designer/src/designer/images/designer.png $P/usr/share/pixmaps/designer-qt4.png  
    install -v -Dm644 tools/linguist/linguist/images/icons/linguist-128-32.png  $P/usr/share/pixmaps/linguist-qt4.png
    install -v -Dm644 tools/qdbus/qdbusviewer/images/qdbusviewer-128.png $P/usr/share/pixmaps/qdbusviewer-qt4.png

 # remove build directories from prl files(from BLFS)
    for file in 3Support CLucene Core DBus Declarative DesignerComponents Designer Gui Help Multimedia Network OpenGL Script ScriptTools Sql Svg Test UiTools WebKit XmlPatterns Xml ;     do
	sed -i -e '/^QMAKE_PRL_BUILD_DIR/d;s/\(QMAKE_PRL_LIBS =\).*/\1/' $P/usr/${libdir}/libQt${file}.prl
	perl -pi -e "s, -L$PWD/?\S+,,g" $P/usr/${libdir}/pkgconfig/Qt${file}.pc
    done
    unset file
  done

######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
  mkdir -p $P/etc/profile.d
  cat <<EOF > $P/etc/profile.d/qt.sh
# Begin /etc/profile.d/qt.sh
QTDIR=/usr
export QTDIR
# End /etc/profile.d/qt.sh
EOF
  cat <<EOF > $P/etc/profile.d/qt.csh
# Begin /etc/profile.d/qt.csh
setenv QTDIR /usr
# End /etc/profile.d/qt.csh
EOF

  # application configurations from BLFS
  install -dm755 $P/usr/share/applications

  cat > $P/usr/share/applications/qtconfig-qt4.desktop << "EOF"
[Desktop Entry]
Name=Qt4 Config 
Comment=Configure Qt4 behavior, styles, fonts
Exec=qtconfig-qt4
Icon=qt4logo
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Settings;
EOF

  cat > $P/usr/share/applications/assistant-qt4.desktop << "EOF"
[Desktop Entry]
Name=Qt4 Assistant 
Comment=Shows Qt4 documentation and examples
Exec=assistant-qt4
Icon=assistant-qt4
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;Documentation;
EOF

  cat > $P/usr/share/applications/designer-qt4.desktop << "EOF"
[Desktop Entry]
Name=Qt4 Designer
Comment=Design GUIs for Qt4 applications
Exec=designer-qt4
Icon=designer-qt4
MimeType=application/x-designer;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;
EOF

  cat > $P/usr/share/applications/linguist-qt4.desktop << "EOF"
[Desktop Entry]
Name=Qt4 Linguist 
Comment=Add translations to Qt4 applications
Exec=linguist-qt4
Icon=linguist-qt4
MimeType=text/vnd.trolltech.linguist;application/x-linguist;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;
EOF

  cat > $P/usr/share/applications/qdbusviewer-qt4.desktop << "EOF"
[Desktop Entry]
Name=Qt4 QDbusViewer 
GenericName=D-Bus Debugger
Comment=Debug D-Bus applications
Exec=qdbusviewer-qt4
Icon=qdbusviewer-qt4
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;Debugger;
EOF

  if [ -d $W/work2 ]; then 
      rm -rf $W/work2 
  fi
  mkdir -p $W/work2/usr/share/doc
  mv $P/usr/share/$src $W/work2/usr/share/doc
  pushd $W/work2
  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root .
  fi
  /sbin/makepkg ../qt_docs-$vers-noarch-${build}.$compress <<EOF
y
1
EOF
  popd

  mkdir -p $docdir/$src
# remove locales except ja
# 
  for loc_dir in `find $P -name locale` ; do
      pushd $loc_dir
      for loc in * ; do
          if [ "$loc" != "ja" ]; then
              rm -rf $loc
          fi
      done
      popd
   done      

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  compress_all
  if [ -d $P/usr/share/man ]; then
      for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
          gzip_dir $mdir
      done
  fi
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
      cp $W/$patch $docdir/$src/$patch
      gzip_one $docdir/$src/$patch
  done

############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share/doc
  fi

######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
