#!/bin/sh

######################################################################
pkgbase=linux_pam
vers=1.3.0
url="http://www.linux-pam.org/library/Linux-PAM-${vers}.tar.bz2"
arch=`uname -m`
build=T1
src=Linux-PAM-${vers}
patchfiles=""
OPT_CONFIG="--enable-shared --enable-read-both-confs --disable-nis"
DOCS="NEWS ABOUT-NLS Copyright README COPYING AUTHORS CHANGELOG
    ChangeLog INSTALL ChangeLog-CVS"
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in * ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`file $i | grep "not stripped"`" ] ; then
         echo "stripping -p $i"
         strip -p $i
      fi
    done
  ) fi
}

strip_libdir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in *.so *.so.* *.a ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`nm -a $i | grep " a "`" ] ; then
        if [ $i != ${i%.a} ] ; then
          echo -n "ranlib and "
          touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
        fi
        echo "stripping -gp $i"
        strip -gp $i
      fi
    done
  ) fi
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr}/$libdir ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
}

prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'\n'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0000'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
  for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/$libdir ; do prune_symlink $i ; done
  prune_symlink $infodir
  for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

#fscheck
W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} ; B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build
case $arch in x86_64) libdir=lib64 ;; *) libdir=lib ;; esac
if [ $# -eq 0 ] ; then
  opt_download=1 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then cp ${SRC_DIR}/${i##*/} . ; fi
    if [ ! -f ${i##*/} ] ; then wget ${SRC_URL}/${i##*/} ; fi
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
    if [ ! -f ${SRC_DIR}/${i##*/} ] ; then cp -p ${i##*/} ${SRC_DIR} ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xpf ${i##*/} ;;
    gz) tar xpzf ${i##*/} ;;
    bz2) tar xpjf ${i##*/} ;;
    esac
  done
fi
if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for j in ${patchfiles[$i]} ; do
      case ${j##*.} in
      gz) gunzip -c $W/$j | patch -Np1 -i - ;;
      bz2) bunzip2 -c $W/j | patch -Np1 -i - ;;
      xz) unxz -c $W/$j | patch -Np1 -i - ;;
      *) patch -Np1 -i $W/$j ;;
      esac
    done
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make clean
    fi
    if [ -f config.log ] ; then
      rm -rf config.cache config.log
    fi
    if [ -x configure ] ; then
      ./configure --prefix=/usr --libdir=/usr/$libdir \
          --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]} \
          --sbindir=/$libdir/security --enable-securedir=/$libdir/security
    fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make install DESTDIR=$P
    fi
  done
  install -d $P/sbin
  ln -s /$libdir/security/pam_tally $P/sbin
  chmod 4755 $P/$libdir/security/unix_chkpwd
  for i in libpam libpamc libpam_misc ; do
    cp -p $P/usr/$libdir/$i.so.0.*.* $P/$libdir
    ( cd $P/$libdir ; ln -s $i.so.0.*.* $i.so.0 )
  done
  cat <<- "EOF" > $P/etc/security/console.handlers
	console consoledevs tty[0-9][0-9]* vc/[0-9][0-9]* :[0-9]\.[0-9] :[0-9]
	EOF
  install -d $P/etc/pam.d
  cat <<- "EOF" > $P/etc/pam.d/system-auth
	#%PAM-1.0
	#
	# The PAM configuration file for system authentication
	#
	
	auth		required	pam_env.so
	auth		sufficient	pam_unix.so try_first_pass nullok
	auth		required	pam_deny.so
	
	account		required	pam_unix.so
	
	password	sufficient	pam_unix.so try_first_pass nullok md5 shadow
	password	required	pam_deny.so
	
	session		required	pam_limits.so
	session		required	pam_unix.so
	EOF
  for i in halt poweroff reboot ; do
    cat <<- "EOF" > $P/etc/pam.d/$i
	#%PAM-1.0
	#
	# The PAM configuration file for shutdown/reboot operations
	#

	auth		sufficient	pam_rootok.so
	auth		required	pam_unix.so
	
	account		required	pam_permit.so
	EOF
  done
  cat <<- "EOF" > $P/etc/pam.d/other
	#%PAM-1.0
	#
	# The PAM configuration file for other
	#
	
	auth		required	pam_deny.so
	auth		required	pam_warn.so
	
	account		required	pam_deny.so
	account		required	pam_warn.so
	
	password	required	pam_deny.so
	password	required	pam_warn.so
	
	session		required	pam_deny.so
	session		required	pam_warn.so
	EOF
  ln -s system-auth $P/etc/pam.d/plamo-default
  cat <<- "EOF" > $P/etc/securetty
	# /etc/securetty: list of terminals on which root is allowed to login.
	# See securetty(5) and login(1).
	console
	EOF
  seq -f "tty%g" 12 >> $P/etc/securetty
  seq -f "ttyp%g" 12 >> $P/etc/securetty
  seq -f "ttyS%g" 0 3 >> $P/etc/securetty
  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et \
      -exec touch -t `date '+%m%d0000'` {} \;
  compress
  strip_libdir $P/$libdir/security
  touch -t `date '+%m%d0000'` $P/$libdir/security
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0000'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done
  for patch in $patchfiles ; do
    cp $W/$patch $docdir/$src/$patch
    gzip_one $docdir/$src/$patch
  done
  mv $docdir/Linux-PAM $docdir/$src/doc
  mv $docdir/$src/{doc,{ABOUT-NLS,Copyright,README,COPYING,AUTHORS}.gz} $C
  mv $docdir/$src/{CHANGELOG,ChangeLog,INSTALL,ChangeLog-CVS,$myname}.gz $C
  mv $C/{doc,{ABOUT-NLS,Copyright,README,COPYING,AUTHORS}.gz} $docdir/$src
  mv $C/{CHANGELOG,ChangeLog,INSTALL,ChangeLog-CVS,$myname}.gz $docdir/$src
  touch -r $S $docdir/$src
  convert
  prune_symlink $P/etc/pam.d
  touch -t `date '+%m%d0000'` $P/etc/pam.d
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
