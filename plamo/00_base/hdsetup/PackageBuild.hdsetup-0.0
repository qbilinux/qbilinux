#!/bin/sh

######################################################################
pkgbase=hdsetup
vers=0.0
url="https://www.busybox.net/downloads/busybox-1.24.1.tar.bz2
    ftp://invisible-island.net/dialog/dialog-1.3-20170509.tgz
    http://ftp.gnu.org/gnu/coreutils/coreutils-8.28.tar.xz
    http://ftp.gnu.org/gnu/gzip/gzip-1.8.tar.gz
    http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz
    http://tukaani.org/xz/xz-5.2.3.tar.xz
    http://ftp.gnu.org/gnu/tar/tar-1.29.tar.gz"
arch=`uname -m`
build=T1
src[0]=busybox-1.24.1
src[1]=dialog-1.3-20160209
src[2]=coreutils-8.25
src[3]=gzip-1.6
src[4]=bzip2-1.0.6
src[5]=xz-5.2.2
src[6]=tar-1.26
patchfiles[0]=""
patchfiles[1]=""
patchfiles[2]=""
patchfiles[3]=""
patchfiles[4]=""
patchfiles[5]=""
patchfiles[6]="tar-1.23-tartime.patch.gz tar-1.23-txz.patch.gz tar-1.26-no-gets.patch.gz"
OPT_CONFIG[0]=""
OPT_CONFIG[1]="--bindir=/bin --enable-nls --with-ncursesw --enable-widec"
OPT_CONFIG[2]="--bindir=/bin --enable-no-install-program=install,chroot"
OPT_CONFIG[2]+=",hostid,nice,who,users,pinky,uptime,stty,df,stdbuf,[,base64"
OPT_CONFIG[2]+=",base32,basename,cat,chcon,chgrp,chmod,chown,cksum,comm,cp"
OPT_CONFIG[2]+=",csplit,cut,date,dd,dir,dircolors,dirname,du,echo,env,expand"
OPT_CONFIG[2]+=",expr,factor,false,fmt,fold,groups,head,id,join,kill,link,ln"
OPT_CONFIG[2]+=",logname,md5sum,mkdir,mkfifo,mknod,mktemp,mv,nl,nproc,nohup"
OPT_CONFIG[2]+=",numfmt,od,pathchk,pr,printenv,printf,ptx,pwd,readlink"
OPT_CONFIG[2]+=",realpath,rm,rmdir,runcon,seq,sha1sum,sha224sum,sha256sum"
OPT_CONFIG[2]+=",sha384sum,sha512sum,shred,shuf,sleep,sort,split,stat,sum"
OPT_CONFIG[2]+=",sync,tac,tail,tee,test,timeout,touch,tr,true,truncate,tsort"
OPT_CONFIG[2]+=",tty,uname,unexpand,uniq,unlink,vdir,wc,whoami,yes
    --without-gmp"
OPT_CONFIG[3]="--bindir=/bin"
OPT_CONFIG[4]=""
OPT_CONFIG[5]="--bindir=/bin --disable-xzdec --disable-lzmadec
    --disable-lzmainfo --disable-lzma-links --disable-scripts"
OPT_CONFIG[6]="--bindir=/bin"
DOCS[0]="TODO LICENSE README AUTHORS INSTALL TODO_unicode"
DOCS[1]=""
DOCS[2]=""
DOCS[3]=""
DOCS[4]=""
DOCS[5]=""
DOCS[6]=""
#patchfiles=""
conffiles="busybox-1.24.1-config"
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in * ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`file $i | grep "not stripped"`" ] ; then
         echo "stripping -p $i"
         strip -p $i
      fi
    done
  ) fi
}

strip_libdir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in *.so *.so.* *.a ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`nm -a $i | grep " a "`" ] ; then
        if [ $i != ${i%.a} ] ; then
          echo -n "ranlib and "
          touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
        fi
        echo "stripping -gp $i"
        strip -gp $i
      fi
    done
  ) fi
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr}/$libdir ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
}

prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'\n'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0000'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
  for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/$libdir ; do prune_symlink $i ; done
  prune_symlink $infodir
  for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

#fscheck
W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} ; B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build
case $arch in x86_64) libdir=lib64 ;; *) libdir=lib ;; esac
if [ $# -eq 0 ] ; then
  opt_download=1 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then cp ${SRC_DIR}/${i##*/} . ; fi
    if [ ! -f ${i##*/} ] ; then wget ${SRC_URL}/${i##*/} ; fi
    if [ ! -f ${i##*/} ] ; then
      wget $i ; j=${i%.*}
      for sig in asc sig{,n} {sha{256,1},md5}{,sum} ; do
        if wget --spider $i.$sig ; then wget $i.$sig ; break ; fi
        if wget --spider $j.$sig ; then
          case ${i##*.} in
          gz) gunzip -c ${i##*/} > ${j##*/} ;;
          bz2) bunzip2 -c ${i##*/} > ${j##*/} ;;
          xz) unxz -c ${i##*/} > ${j##*/} ;;
          esac
          touch -r ${i##*/} ${j##*/} ; i=$j ; wget $i.$sig ; break
        fi
      done
      if [ -f ${i##*/}.$sig ] ; then
        case $sig in
        asc|sig|sign) gpg --verify ${i##*/}.$sig ;;
        sha256|sha1|md5) ${sig}sum -c ${i##*/}.$sig ;;
        *) $sig -c ${i##*/}.$sig ;;
        esac
        if [ $? -ne 0 ] ; then echo "archive verify failed" ; exit ; fi
      fi
    fi
    if [ ! -f ${SRC_DIR}/${i##*/} ] ; then cp -p ${i##*/} ${SRC_DIR} ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xpf ${i##*/} ;;
    gz|tgz) tar xpzf ${i##*/} ;;
    bz2|tbz) tar xpjf ${i##*/} ;;
    xz|txz) tar xpJf ${i##*/} ;;
    esac
  done
fi
if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for j in ${patchfiles[$i]} ; do
      case ${j##*.} in
      gz) gunzip -c $W/$j | patch -Np1 -i - ;;
      bz2) bunzip2 -c $W/j | patch -Np1 -i - ;;
      xz) unxz -c $W/$j | patch -Np1 -i - ;;
      *) patch -Np1 -i $W/$j ;;
      esac
    done
  done
  cd ${B[0]}
  cp -p $W/busybox-1.24.1-config .config
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f [Mm]akefile ] ; then
      make clean
    fi
    if [ -f config.log ] ; then
      rm -rf config.cache config.log
    fi
    if [ -x configure ] ; then
      ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
          --libdir='${exec_prefix}'/$libdir --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f [Mm]akefile ] ; then
      case $i in
      0) make ;;
      1) make LIBS="-lncursesw -lm -ldl -static" ;;
      4) make LDFLAGS="-ldl -static" ;;
      5) make LIBS="-ldl -all-static" ;;
      *) make LIBS="-ldl -static" ;;
      esac
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f [Mm]akefile ] ; then
      case $i in
      0) make install CONFIG_PREFIX=$P ;;
      3) make install DESTDIR=$P bin_SCRIPTS=zcat ;;
      4) make install PREFIX=$P ;;
      *) make install DESTDIR=$P ;;
      esac
    fi
  done
  ln -f $P/bin/xz{,cat}
  rm $P/bin/{\[\[,ash,cttyhack,{e,f}grep,hush,test,install,bunzip2}
  rm $P/bin/{bz{ip2recover,{,e,f}grep,more,less,diff,cmp},unxz}
  install -d $P/sbin
  mv $P/bin $P/sbin/installer
  cp -r $W/sbin $P
  install -d $P/usr/lib/setup
  touch $P/usr/lib/setup/Tsumiki-$vers
  touch $W/i.et
  cd $W
  compress
  strip_bindir $P/sbin/installer
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    for j in ${patchfiles[$i]} ; do
      cp $W/$j $docdir/$src/$j
    done
  done
  for f in $conffiles ; do
    cp $W/$f $docdir/$src/$f
    gzip_one $docdir/$src/$f
  done
  cp -r sbin $docdir/$src/
  cp -a $S/docs $docdir/$src
  for i in busybox.pod BusyBox.txt busybox.{1,net} BusyBox.html ; do
    cp -a $B/docs/$i $docdir/$src/docs
    touch -t `date '+%m%d0000'` $docdir/$src/docs/$i
  done
  touch -r $S/docs $docdir/$src/docs
  chown -R root.root $docdir/$src/docs
  mv $docdir/$src/{docs,{TODO,LICENSE,README,AUTHORS,INSTALL}.gz} $C
  mv $docdir/$src/{TODO_unicode,$myname}.gz $C
  mv $C/{docs,{TODO,LICENSE,README,AUTHORS,INSTALL}.gz} $docdir/$src
  mv $C/{TODO_unicode,$myname}.gz $docdir/$src
  touch -r $S $docdir/$src
  convert
  tar cvpf $pkg.tar -C $P `cd $P ; find sbin -maxdepth 1 | tail -n+2`
  tar rvpf $pkg.tar -C $P usr/lib/setup
  tar rvpf $pkg.tar -C $P usr/share/doc/$src
  touch -t `date '+%m%d0000'` $pkg.tar ; xz $pkg.tar ; touch $pkg.tar.xz
  mv $pkg.tar.xz $pkg.txz
fi
