#!/bin/sh

######################################################################
pkgbase=openssl
vers=1.1.1a
url="http://www.openssl.org/source/openssl-${vers}.tar.gz"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=T2
src=openssl-$vers
OPT_CONFIG=""
DOCS="ACKNOWLEDGEMENTS AUTHORS CHANGES CONTRIBUTING FAQ INSTALL
    LICENSE NEWS NOTES.ANDROID NOTES.DJGPP NOTES.PERL NOTES.UNIX
    NOTES.VMS NOTES.WIN README README.ENGINE README.FIPS"
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
    cd $W
    if [ ! -f ca-bundle.crt ] ; then
	chmod +x mkcabundle.pl
	./mkcabundle.pl > ca-bundle.crt
    fi
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    mkdir ${B[$1]}
    cd ${B[$1]}
    case $arch in
	i686) sys=elf ;;
	x86_64) sys=x86_64 ;;
	armv7l) sys=armv4 ;;
    esac
    ${S[$1]}/config --prefix=/usr --openssldir=/etc/ssl shared zlib-dynamic enable-ssl2
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make depend
	make
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    for mk in `find . -name "[Mm]akefile" ` ; do
	sed -i -e 's|GCONFTOOL = /usr/bin/gconftool-2|GCONFTOOL = echo|' $mk
    done
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    # add extra func
    install $W/mkcabundle.pl $P/etc/ssl
    cp -r certs $P/etc/ssl
    install -m 644 $W/ca-bundle.crt $P/etc/ssl/certs
    ln -s /etc/ssl $P/usr/share
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
