#!/bin/sh -x

######################################################################
#url="https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.12.2.tar.xz
#    git://github.com/sfjro/aufs4-standalone.git"
version=5.4.64
url="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${version%.*}.tar.xz
	https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-${version}.xz
	git://github.com/sfjro/aufs5-standalone.git"
pkgbase=kernel_rpi
apply_arch="armv6l armv7l aarch64"
arch=`uname -m`
build=1
src=linux-${version%.*}
#patchfiles="cjktty-kernel-5.3.patch cjktty-kernel-font-JP.patch overlayfs-allow_unprivileged_mounts.patch patch.Kconfig patch.Makefile"
patchfiles="cjktty-kernel-5.4.patch cjktty-kernel-font-JP.patch overlayfs-allow_unprivileged_mounts.patch"
arm_patchfiles="rpi-5.4.64-20200912-65caf60.diff"
patchfiles_not_used="tuxonice-for-linux-5.0.18.patch 4.8-morse_code_panics.patch 4.8-panic_beep.patch"
configfileARMv6="config-${version%.*}-armv6l"
configfileARMv7="config-${version%.*}-armv7l"
configfileARM64="config-${version%.*}-aarch64_rpi4"
case $arch in
    armv6l)
	vers=${version}_armv6l
	configfile=$configfileARMv6
	;;
    armv7l)
	vers=${version}_armv7l
	configfile=$configfileARMv7
	;;
    *)
	vers=${version}_aarch64
	configfile=$configfileARM64
	;;
esac
git_branch=aufs5.4
aufs_git_vers=5a1e53d
OPT_CONFIG=""
DOCS=""
compress=txz
SRC_URL="https://qbilinux.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$1]}
    xz -dc $W/patch-${version}.xz | patch -p1
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]} 
    cd ${B[$1]}

    patch -Np1 -i $W/source/aufs5-standalone/aufs5-kbuild.patch
    patch -Np1 -i $W/source/aufs5-standalone/aufs5-base.patch
    patch -Np1 -i $W/source/aufs5-standalone/aufs5-mmap.patch
    patch -Np1 -i $W/source/aufs5-standalone/aufs5-standalone.patch
    cp -av $W/source/aufs5-standalone/Documentation .
    cp -av $W/source/aufs5-standalone/fs .
    cp -pv $W/source/aufs5-standalone/include/uapi/linux/aufs_type.h include/uapi/linux

    cat $W/$arm_patchfiles | patch -Np1 -i -
    chmod 755 drivers/net/wireless/realtek/rtl8192cu/{clean,runwpa,wlan0dhcp}

    cp -p $W/${configfile} .config
}

do_build() {
    cd ${B[$1]}
    make
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    install -d $P/boot
    make modules_install INSTALL_MOD_PATH=$P

    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    krel=${vers//_/-}
    case $arch in
	armv6l)
	    make zinstall INSTALL_PATH=$P/boot
	    cp -p $P/boot/config{-$krel,}
	    cp -p $P/boot/kernel.img{-$krel,}
	    cp -p $P/boot/System.map{-$krel,}
	    install -m 644 $B/arch/arm/boot/dts/*.dtb $P/boot
	    install -d $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/README $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/*.dtbo $P/boot/overlays
	    ;;
	armv7l)
	    make zinstall INSTALL_PATH=$P/boot
	    cp -p $P/boot/config{-$krel,}
	    cp -p $P/boot/kernel7.img{-$krel,}
	    cp -p $P/boot/System.map{-$krel,}
	    install -m 644 $B/arch/arm/boot/dts/*.dtb $P/boot
	    install -d $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/README $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/*.dtbo $P/boot/overlays
	    ;;
	aarch64)
	    make install INSTALL_PATH=$P/boot
	    mv $P/boot/vmlinuz $P/boot/kernel8.img-${krel}
	    mv $P/boot/config $P/boot/config-${krel}
	    mv $P/boot/System.map $P/boot/System.map-${krel}
	    cp -p $P/boot/config{-$krel,}
	    cp -p $P/boot/kernel8.img{-$krel,}
	    cp -p $P/boot/System.map{-$krel,}
	    install -m 644 $B/arch/arm64/boot/dts/broadcom/*.dtb $P/boot
	    install -d $P/boot/overlays
	    install -m 644 $B/arch/arm64/boot/dts/overlays/README $P/boot/overlays
	    install -m 644 $B/arch/arm64/boot/dts/overlays/*.dtbo $P/boot/overlays
	    ;;
    esac
    (rm $P/lib/modules/$krel/source; ln -s /usr/src/linux $P/lib/modules/$krel/source)
    (rm $P/lib/modules/$krel/build; ln -s /usr/src/linux $P/lib/modules/$krel/build)
}

do_package() {
    for i in $configfile64 $configfile32 $configfileARMv6 $configfileARMv7 $configfileARM64 $arm_patchfiles ; do
	cp $W/$i $docdir/$src/$i
	gzip $docdir/$src/$i
    done
    
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
