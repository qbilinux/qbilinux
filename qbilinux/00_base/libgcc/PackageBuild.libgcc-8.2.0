#!/bin/sh -x
##############################################################
pkgbase=libgcc
vers=8.2.0
url="http://ftp.jaist.ac.jp/pub/GNU/gcc/gcc-${vers}/gcc-${vers}.tar.xz"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=T3
src=gcc-${vers}
if [ $arch = "armv7l" ]; then
    build_arch=arm-pc-linux-gnueabihf
    libdir="lib"
    ARCH_CONFIG='--with-arch=armv6 --with-fpu=vfp --with-float=hard'
elif [ $arch = "aarch64" ]; then
    build_arch=${arch}-pc-linux-gnu
    libdir="lib64"
    ARCH_CONFIG=''
elif [ $arch = "x86_64" ]; then
    build_arch=${arch}-pc-linux-gnu
    libdir="lib64"
    ARCH_CONFIG='--enable-libmpx'
else
    build_arch=${arch}-pc-linux-gnu
    libdir="lib"
    ARCH_CONFIG='--enable-libmpx'
fi
OPT_CONFIG="--build=${build_arch} --host=${build_arch} --libexecdir=/usr/${libdir}
   --enable-languages=c,c++,fortran,go,lto 
   --enable-shared --enable-threads=posix --with-system-zlib --with-isl --enable-__cxa_atexit 
   --disable-libunwind-exceptions  --disable-libstdcxx-pch --enable-clocale=gnu --enable-gnu-unique-object 
   --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu 
   --enable-gnu-indirect-function --disable-multilib --disable-werror --enable-checking=release ${ARCH_CONFIG}"
DOCS='ABOUT-NLS COPYING COPYING.LIB COPYING.RUNTIME COPYING3 COPYING3.LIB ChangeLog ChangeLog.tree-ssa INSTALL MAINTAINERS NEWS README'
patchfiles=''
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
##############################################################'

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$1]}
    for patch in $patchfiles ; do
	if [ ! -f .${patch} ]; then
	    patch -p1 < $W/$patch
	    touch .${patch}
	fi
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    if [ ! -f $W/ecj-latest.jar ]; then
	wget ftp://sourceware.org/pub/java/ecj-latest.jar
    fi

    mkdir ${B[$1]}
    cd ${B[$1]}
    if [ -x ../../../source/$src/configure ] ; then
	export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
	export LDFLAGS='-Wl,--as-needed' 
	../../../source/$src/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    export LDFLAGS='-Wl,--as-needed'
    make
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    export LDFLAGS='-Wl,--as-needed'
    make install DESTDIR=$P
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi
}

do_package() {
    P2=$W/work2/$arch/${pkgbase}
    if [ -d $P2 ]; then
      rm -rf $P2
    fi

    mkdir -p $P2
    mv $P/* $P2

    # for libgcc
    echo "building libcc"
    pkgbase=libgcc
    pkg=$pkgbase-$vers-$arch-$build
    if [ -d $P ]; then rm -rf $P ; fi
    mkdir -p $P/usr/${libdir}
    for i in libgcc_s.so* libstdc++.so.6* ; do
	cp -a $P2/usr/${libdir}/$i $P/usr/${libdir}
	rm $P/usr/${libdir}/*gdb.py
    done
    cd $P
    /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
}

source /usr/src/qbilinux/PackageBuild.func
