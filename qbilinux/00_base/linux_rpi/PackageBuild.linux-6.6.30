#!/bin/sh -x

# on x86_64 environment, please set arch=armv7l host_arch=x86_64.

######################################################################
#url="https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.12.2.tar.xz
#    git://github.com/sfjro/aufs4-standalone.git"
version=6.6.30
url="https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${version%.*}.tar.xz
	https://cdn.kernel.org/pub/linux/kernel/v6.x/patch-${version}.xz"
#	git://github.com/sfjro/aufs5-standalone.git"
pkgbase=kernel_rpi
apply_arch="armv6l armv7l aarch64"
arch=${arch:-`uname -m`}
host_arch=${host_arch:-native}
# cat /proc/device-tree/model
build=1
src[0]=linux-${version%.*}
patchfiles[0]="cjktty-linux-6.6.patch cjktty-linux-font-JP-6.6.patch overlayfs-allow_unprivileged_mounts.patch"
arm_patchfiles[0]="rpi-6.6.30-20240516-c40b423b1.diff"
patchfiles_not_used="tuxonice-for-linux-5.0.18.patch 4.8-morse_code_panics.patch 4.8-panic_beep.patch"
case $arch in
    armv6l)
	ext[0]=armv6l_rpi1	 ;;
    armv7l)
	src[1]=${src[0]}
	patchfiles[1]=${patchfiles[0]}
	arm_patchfiles[1]=${arm_patchfiles[0]}
	ext[0]=armv7l_rpi2
	ext[1]=armv7l_rpi4	 ;;
    aarch64)
	src[1]=${src[0]}
	patchfiles[1]=${patchfiles[0]}
	arm_patchfiles[1]=${arm_patchfiles[0]}
	ext[0]=aarch64_rpi3
	ext[1]=aarch64_rpi5 ;;
    *)
	;;
esac
vers=${version}_${ext}
#git_branch=aufs5.4
#aufs_git_vers=5a1e53d
OPT_CONFIG=""
DOCS=""
compress=txz
SRC_URL=${SRC_URL:-"https://qbilinux.org/pub/source/"}
SRC_DIR=${SRC_DIR:-"/home/archives/source/"}
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    if [ $1 == 0 ]; then
	cd ${S[$1]}
	xz -dc $W/patch-${version}.xz | patch -p1
	for patch in $patchfiles ; do
	    patch -p1 < $W/$patch
	done
    fi
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]} 
    cd ${B[$1]}

    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-kbuild.patch
    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-base.patch
    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-mmap.patch
    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-standalone.patch
    # cp -av $W/source/aufs5-standalone/Documentation .
    # cp -av $W/source/aufs5-standalone/fs .
    # cp -pv $W/source/aufs5-standalone/include/uapi/linux/aufs_type.h include/uapi/linux

    cat $W/$arm_patchfiles | patch -Np1 -i -
    chmod 755 drivers/net/wireless/realtek/rtl8192cu/{clean,runwpa,wlan0dhcp}

    cp -p $W/config-${version%.*}-${ext[$1]} .config
}

do_build() {
    cd ${B[$1]}
    case $host_arch in
	x86_64)
	    case $arch in
		armv6l|armv7l)
		    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs ;;
		*)
		    make ARCH=arm64 CROSS_COMPILE=arch64-linux-gnu-  Image  modules dtbs ;;
	    esac ;;
	*)
	    case $arch in
		armv6l|armv7l)
		    make zImage   modules dtbs ;;
		*)
		    make Image.gz modules dtbs ;;
	    esac
	    ;;
    esac
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    P=$W/work/$arch/${pkgbase[0]}-${ext[0]}
    install -d $P/boot
    case $host_arch in
	x86_64)
	    case $arch in
		armv6l|armv7l)
		    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=$P modules_install
		    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_PATH=$P/boot zinstall
		    ;;
		*)
		    make ARCH=arm64 CROSS_COMPILE=arch64-linux-gnu- INSTALL_MOD_PATH=$P modules_install
		    make ARCH=arm64 CROSS_COMPILE=arch64-linux-gnu- INSTALL_PATH=$P/boot install
		    ;;
	    esac
	    ;;
	*)
	    make INSTALL_MOD_PATH=$P modules_install
	    case $arch in
		armv6l|armv7l)
		    make INSTALL_PATH=$P/boot zinstall ;;
		*)
		    make INSTALL_PATH=$P/boot install  ;;
	    esac
	    ;;
    esac

    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    krel=${vers//_/-}
    case $arch in
	armv6l)
	    cp -p $P/boot/config{-$krel,}
	    cp -p $P/boot/kernel.img{-$krel,}
	    cp -p $P/boot/System.map{-$krel,}
	    install -m 644 $B/arch/arm/boot/dts/*.dtb $P/boot
	    install -d $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/README $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/*.dtbo $P/boot/overlays
	    ;;
	armv7l)
	    cp -p $P/boot/config{-$krel,}
	    cp -p $P/boot/kernel7.img{-$krel,}
	    cp -p $P/boot/System.map{-$krel,}
	    install -m 644 $B/arch/arm/boot/dts/*.dtb $P/boot
	    install -d $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/README $P/boot/overlays
	    install -m 644 $B/arch/arm/boot/dts/overlays/*.dtbo $P/boot/overlays
	    ;;
	aarch64)
	    mv $P/boot/vmlinuz $P/boot/kernel8.img-${krel}
	    mv $P/boot/config $P/boot/config-${krel}
	    mv $P/boot/System.map $P/boot/System.map-${krel}
	    cp -p $P/boot/config{-$krel,}
	    cp -p $P/boot/kernel8.img{-$krel,}
	    cp -p $P/boot/System.map{-$krel,}
	    install -m 644 $B/arch/arm64/boot/dts/broadcom/*.dtb $P/boot
	    install -d $P/boot/overlays
	    install -m 644 $B/arch/arm64/boot/dts/overlays/README $P/boot/overlays
	    install -m 644 $B/arch/arm64/boot/dts/overlays/*.dtbo $P/boot/overlays
	    ;;
    esac
    (rm $P/lib/modules/$krel/source; ln -s /usr/src/linux $P/lib/modules/$krel/source)
    (rm $P/lib/modules/$krel/build; ln -s /usr/src/linux $P/lib/modules/$krel/build)
}

do_package() {
    for i in $configfile64 $configfile32 $configfileARMv6 $configfileARMv7 $configfileARM64 $arm_patchfiles ; do
	cp $W/$i $docdir/$src/$i
	gzip $docdir/$src/$i
    done
    
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
