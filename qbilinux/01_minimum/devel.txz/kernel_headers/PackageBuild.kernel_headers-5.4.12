#!/bin/sh -x

######################################################################
#url="https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.11.7.tar.xz
#    git://github.com/sfjro/aufs5-standalone.git"
version=5.4.12
url="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${version%}.tar.xz"
pkgbase=kernel_headers
apply_arch="x86_64 i686"
arch=`uname -m`
build=1
src=linux-${version}
#src=linux-${version%.*}
patchfiles="cjktty-kernel-5.3.patch cjktty-kernel-font-JP.patch overlayfs-allow_unprivileged_mounts.patch"
patchfiles_not_used="tuxonice-5.4.8-20200116-f147d78.diff 4.8-morse_code_panics.patch 4.8-panic_beep.patch"
configfile64="config-${version%.*}-x64"
configfile32="config-${version%.*}-x86"
case $arch in
    x86_64)
	vers=${version}_x64
	configfile=$configfile64
	;;
    i?86)
	vers=${version}_x86
	configfile=$configfile32
	;;
esac
#git_branch=aufs5.3
#aufs_git_vers=6c15dd2
OPT_CONFIG=""
DOCS=""
compress=txz
SRC_URL="https://qbilinux.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$1]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]} 
    cd ${B[$1]}

    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-kbuild.patch
    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-base.patch
    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-mmap.patch
    # patch -Np1 -i $W/source/aufs5-standalone/aufs5-standalone.patch
    # cp -av $W/source/aufs5-standalone/Documentation .
    # cp -av $W/source/aufs5-standalone/fs .
    # cp -pv $W/source/aufs5-standalone/include/uapi/linux/aufs_type.h include/uapi/linux
    cp -p $W/${configfile} .config
}

do_build() {
    cd ${B[$1]}
}

do_install() {
    cd ${B[$1]}
    make headers_install INSTALL_HDR_PATH=$P/usr

    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    find $P/usr/include \( -name ".install" -o -name "..install.cmd" \) \
	 -exec rm {} \;
}

do_package() {
    for i in $configfile64 $configfile32 ; do
	cp $W/$i $docdir/$src/$i
	gzip $docdir/$src/$i
    done
    
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
