diff -Naur linux-4.19-rc8/drivers/tty/vt/selection.c linux-4.19-rc8.i686/drivers/tty/vt/selection.c
--- linux-4.19-rc8/drivers/tty/vt/selection.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/tty/vt/selection.c	2018-10-21 10:52:14.463191843 +0900
@@ -318,6 +318,8 @@
 			}
 			obp = bp;
 		}
+		if (c > 0x80)
+			i += 2;
 	}
 	sel_buffer_lth = bp - sel_buffer;
 	return 0;
diff -Naur linux-4.19-rc8/drivers/tty/vt/vt.c linux-4.19-rc8.i686/drivers/tty/vt/vt.c
--- linux-4.19-rc8/drivers/tty/vt/vt.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/tty/vt/vt.c	2018-10-21 11:01:38.412866947 +0900
@@ -303,6 +303,20 @@
 	return p;
 }
 
+static inline unsigned short *screenpos_utf8(struct vc_data *vc, int offset, int viewed)
+{
+	unsigned short *p;
+
+	if (!viewed)
+		p = (unsigned short *)(vc->vc_origin + offset + vc->vc_screenbuf_size);
+	else if (!vc->vc_sw->con_screen_pos)
+		p = (unsigned short *)(vc->vc_visible_origin + offset + vc->vc_screenbuf_size);
+	else
+		p = vc->vc_sw->con_screen_pos(vc, -offset - 1);
+	return p;
+}
+ 
+
 /* Called  from the keyboard irq path.. */
 static inline void scrolldelta(int lines)
 {
@@ -640,6 +654,11 @@
 	}
 	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
 	scr_memsetw(clear, vc->vc_video_erase_char, vc->vc_size_row * nr);
+
+	d += (vc->vc_screenbuf_size >> 1);
+	s += (vc->vc_screenbuf_size >> 1);
+	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
+	scr_memsetw(d + (b - t - nr) * vc->vc_cols, 0, vc->vc_size_row * nr);
 }
 
 static void do_update_region(struct vc_data *vc, unsigned long start, int count)
@@ -801,6 +820,8 @@
 	static int old_offset = -1;
 	static unsigned short old;
 	static unsigned short oldx, oldy;
+	static unsigned short *p_ext = NULL;
+	static unsigned short old_ext = 0;
 
 	WARN_CONSOLE_UNLOCKED();
 
@@ -808,7 +829,7 @@
 	    old_offset < vc->vc_screenbuf_size) {
 		scr_writew(old, screenpos(vc, old_offset, 1));
 		if (con_should_update(vc))
-			vc->vc_sw->con_putc(vc, old, oldy, oldx);
+			vc->vc_sw->con_putc(vc, (old_ext << 16)|old, oldy, oldx);
 		notify_update(vc);
 	}
 
@@ -819,13 +840,15 @@
 		unsigned short new;
 		unsigned short *p;
 		p = screenpos(vc, offset, 1);
+		p_ext = screenpos_utf8(vc, offset, 1);
 		old = scr_readw(p);
+		old_ext = scr_readw(p_ext);
 		new = old ^ vc->vc_complement_mask;
 		scr_writew(new, p);
 		if (con_should_update(vc)) {
 			oldx = (offset >> 1) % vc->vc_cols;
 			oldy = (offset >> 1) / vc->vc_cols;
-			vc->vc_sw->con_putc(vc, new, oldy, oldx);
+			vc->vc_sw->con_putc(vc, (old_ext << 16)|new, oldy, oldx);
 		}
 		notify_update(vc);
 	}
@@ -1088,7 +1111,7 @@
 	if (!*vc->vc_uni_pagedir_loc)
 		con_set_default_unimap(vc);
 
-	vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size, GFP_KERNEL);
+	vc->vc_screenbuf = kmalloc(vc->vc_screenbuf_size * 2, GFP_KERNEL);
 	if (!vc->vc_screenbuf)
 		goto err_free;
 
@@ -1149,7 +1172,7 @@
 {
 	unsigned long old_origin, new_origin, new_scr_end, rlth, rrem, err = 0;
 	unsigned long end;
-	unsigned int old_rows, old_row_size, first_copied_row;
+	unsigned int old_rows, old_row_size, first_copied_row, old_screen_size;;
 	unsigned int new_cols, new_rows, new_row_size, new_screen_size;
 	unsigned int user;
 	unsigned short *newscreen;
@@ -1176,7 +1199,7 @@
 
 	if (new_screen_size > (4 << 20))
 		return -EINVAL;
-	newscreen = kzalloc(new_screen_size, GFP_USER);
+	newscreen = kmalloc(new_screen_size * 2, GFP_USER);
 	if (!newscreen)
 		return -ENOMEM;
 
@@ -1193,6 +1216,7 @@
 
 	old_rows = vc->vc_rows;
 	old_row_size = vc->vc_size_row;
+	old_screen_size = old_rows * old_row_size;
 
 	err = resize_screen(vc, new_cols, new_rows, user);
 	if (err) {
@@ -1241,15 +1265,23 @@
 	while (old_origin < end) {
 		scr_memcpyw((unsigned short *) new_origin,
 			    (unsigned short *) old_origin, rlth);
-		if (rrem)
+ 		scr_memcpyw((unsigned short *) new_origin + (new_screen_size >> 1),
+ 			    (unsigned short *) old_origin + (old_screen_size >> 1), rlth);
+		if (rrem){
 			scr_memsetw((void *)(new_origin + rlth),
 				    vc->vc_video_erase_char, rrem);
+ 			scr_memsetw((void *)(new_origin + rlth + (new_screen_size)),
+ 				    vc->vc_video_erase_char, rrem);
+		}
 		old_origin += old_row_size;
 		new_origin += new_row_size;
 	}
-	if (new_scr_end > new_origin)
+	if (new_scr_end > new_origin){
 		scr_memsetw((void *)new_origin, vc->vc_video_erase_char,
 			    new_scr_end - new_origin);
+ 		scr_memsetw((void *)new_origin + (new_screen_size), vc->vc_video_erase_char,
+ 			    new_scr_end - new_origin);
+	}
 	kfree(vc->vc_screenbuf);
 	vc->vc_screenbuf = newscreen;
 	vc->vc_screenbuf_size = new_screen_size;
@@ -2569,6 +2601,8 @@
 		rescan = 0;
 		inverse = 0;
 		width = 1;
+		vc->vc_utf = 1;
+		vc->vc_disp_ctrl = 0;
 
 		/* Do no translation at all in control states */
 		if (vc->vc_state != ESnormal) {
@@ -2636,7 +2670,7 @@
 				continue;
 			    }
 			}
-			/* Nothing to do if an ASCII byte was received */
+
 		    }
 		    /* End of UTF-8 decoding. */
 		    /* c is the received character, or U+FFFD for invalid sequences. */
@@ -2725,10 +2759,30 @@
 				if (vc->vc_decim)
 					insert_char(vc, 1);
 				vc_uniscr_putc(vc, next_c);
-				scr_writew(himask ?
-					     ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
-					     (vc_attr << 8) + tc,
-					   (u16 *) vc->vc_pos);
+
+				if(is_double_width(c) && width==2)
+				{
+					tc = 0xFF;
+					scr_writew(himask ?
+							 ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
+							 (vc_attr << 8) + tc,
+						   (u16 *) vc->vc_pos);
+					scr_writew(c, (u16 *) vc->vc_pos + (vc->vc_screenbuf_size >> 1));
+				}else if(is_double_width(c) && width==1){
+					tc = 0xFE;
+					scr_writew(himask ?
+							 ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
+							 (vc_attr << 8) + tc,
+						   (u16 *) vc->vc_pos);
+					scr_writew(c, (u16 *) vc->vc_pos + (vc->vc_screenbuf_size >> 1));
+				}else{
+					scr_writew(himask ?
+							 ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
+							 (vc_attr << 8) + tc,
+						   (u16 *) vc->vc_pos);
+					scr_writew(c, (u16 *) vc->vc_pos + (vc->vc_screenbuf_size >> 1));
+				}
+
 				if (con_should_update(vc) && draw_x < 0) {
 					draw_x = vc->vc_x;
 					draw_from = vc->vc_pos;
@@ -2746,11 +2800,13 @@
 				tc = conv_uni_to_pc(vc, ' '); /* A space is printed in the second column */
 				if (tc < 0) tc = ' ';
 				next_c = ' ';
-			}
-			notify_write(vc, c);
+				
+				notify_write(vc, c);
 
-			if (inverse)
-				con_flush(vc, draw_from, draw_to, &draw_x);
+				if (inverse)
+					con_flush(vc, draw_from, draw_to, &draw_x);
+
+			}
 
 			if (rescan) {
 				rescan = 0;
@@ -3344,7 +3400,7 @@
 		INIT_WORK(&vc_cons[currcons].SAK_work, vc_SAK);
 		tty_port_init(&vc->port);
 		visual_init(vc, currcons, 1);
-		vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size, GFP_NOWAIT);
+		vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size * 2, GFP_NOWAIT);
 		vc_init(vc, vc->vc_rows, vc->vc_cols,
 			currcons || !vc->vc_sw->con_save_screen);
 	}
@@ -4563,6 +4619,11 @@
 
 int con_font_op(struct vc_data *vc, struct console_font_op *op)
 {
+	/* IF WE ENABLE CJK font, I won't let you guys set console font any way until
+	   we found a way to set console font that is unicode capable
+	 */
+	if(vc->vc_font.charcount > op->charcount)
+		return 0;
 	switch (op->op) {
 	case KD_FONT_OP_SET:
 		return con_font_set(vc, op);
@@ -4586,9 +4647,15 @@
 	u16 w = scr_readw(screenpos(vc, offset, 1));
 	u16 c = w & 0xff;
 
-	if (w & vc->vc_hi_font_mask)
-		c |= 0x100;
-	return c;
+	u16 c_utf8 = scr_readw(screenpos_utf8(vc, offset, 1));
+
+	if ( (c == 0xff || c == 0xfe) && c_utf8 != 0){
+		return c_utf8;
+	}else{
+		if (w & vc->vc_hi_font_mask)
+			c |= 0x100;
+		return c;
+	}
 }
 EXPORT_SYMBOL_GPL(screen_glyph);
 
diff -Naur linux-4.19-rc8/drivers/video/console/Kconfig linux-4.19-rc8.i686/drivers/video/console/Kconfig
--- linux-4.19-rc8/drivers/video/console/Kconfig	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/console/Kconfig	2018-10-21 10:52:14.547202521 +0900
@@ -143,6 +143,7 @@
 config FRAMEBUFFER_CONSOLE_ROTATION
        bool "Framebuffer Console Rotation"
        depends on FRAMEBUFFER_CONSOLE
+       depends on !FONT_16x16_CJK
        help
          Enable display rotation for the framebuffer console.  This is done
          in software and may be significantly slower than a normally oriented
diff -Naur linux-4.19-rc8/drivers/video/console/Makefile linux-4.19-rc8.i686/drivers/video/console/Makefile
--- linux-4.19-rc8/drivers/video/console/Makefile	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/console/Makefile	2018-10-21 10:52:14.554203410 +0900
@@ -3,6 +3,7 @@
 # 5 Aug 1999, James Simmons, <mailto:jsimmons@users.sf.net>
 # Rewritten to use lists instead of if-statements.
 
+# Font handling
 obj-$(CONFIG_DUMMY_CONSOLE)       += dummycon.o
 obj-$(CONFIG_SGI_NEWPORT_CONSOLE) += newport_con.o
 obj-$(CONFIG_STI_CONSOLE)         += sticon.o sticore.o
diff -Naur linux-4.19-rc8/drivers/video/fbdev/core/bitblit.c linux-4.19-rc8.i686/drivers/video/fbdev/core/bitblit.c
--- linux-4.19-rc8/drivers/video/fbdev/core/bitblit.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/fbdev/core/bitblit.c	2018-10-21 10:52:14.559204046 +0900
@@ -10,6 +10,7 @@
  *  more details.
  */
 
+#include <linux/font.h>
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/string.h>
@@ -43,6 +44,21 @@
 	}
 }
 
+static inline u16 utf8_pos(struct vc_data *vc, const unsigned short *utf8)
+{
+	unsigned long p = (long)utf8;
+	if (p >= vc->vc_origin && p < vc->vc_scr_end) {
+		return scr_readw((unsigned short *)(p + vc->vc_screenbuf_size));
+	} else if (vc->vc_num == fg_console && fbcon_is_softback(utf8)){
+		return scr_readw((unsigned short *)(p + fbcon_softback_size));
+	} else {
+		u16 extra_c;
+		int c = *(int*)utf8;
+		extra_c = (c >> 16 ) & 0x0000ffff;
+		return extra_c;
+	}
+}
+
 static void bit_bmove(struct vc_data *vc, struct fb_info *info, int sy,
 		      int sx, int dy, int dx, int height, int width)
 {
@@ -74,6 +90,34 @@
 	info->fbops->fb_fillrect(info, &region);
 }
 
+u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+					u16 charmask)
+{
+	u32	utf8_c;
+
+	u8 *src = vc->vc_font.data + (scr_readw(s)&
+				  charmask)*cellsize;
+
+	utf8_c = utf8_pos(vc, s);
+
+	if( utf8_c <= vc->vc_font.charcount)
+	{
+		/*
+		 * decide left-half char or right-half char.
+		 * Since non-English chars may double weight
+		 */
+		switch (scr_readw(s) & charmask) {
+			case 0xff:
+				src = vc->vc_font.data + (utf8_c * cellsize *2 );
+				break;
+			case 0xfe:
+				src = vc->vc_font.data + (utf8_c * cellsize *2 + cellsize);
+				break;
+		}
+	}
+	return src;
+}
+
 static inline void bit_putcs_aligned(struct vc_data *vc, struct fb_info *info,
 				     const u16 *s, u32 attr, u32 cnt,
 				     u32 d_pitch, u32 s_pitch, u32 cellsize,
@@ -84,14 +128,12 @@
 	u8 *src;
 
 	while (cnt--) {
-		src = vc->vc_font.data + (scr_readw(s++)&
-					  charmask)*cellsize;
+		src = font_bits(vc,s++,cellsize,charmask);
 
 		if (attr) {
 			update_attr(buf, src, attr, vc);
 			src = buf;
 		}
-
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
 						image->height);
@@ -119,14 +161,11 @@
 	u8 *src;
 
 	while (cnt--) {
-		src = vc->vc_font.data + (scr_readw(s++)&
-					  charmask)*cellsize;
-
+		src = font_bits(vc,s++,cellsize,charmask);
 		if (attr) {
 			update_attr(buf, src, attr, vc);
 			src = buf;
 		}
-
 		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
 					image->height, shift_high,
 					shift_low, mod);
@@ -245,6 +284,8 @@
 	int err = 1;
 	char *src;
 
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
+
 	cursor.set = 0;
 
 	if (softback_lines) {
@@ -258,7 +299,7 @@
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = vc->vc_font.data + ((c & charmask) * (w * vc->vc_font.height));
+	src = font_bits(vc,(u16*)vc->vc_pos,cellsize,charmask);
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -Naur linux-4.19-rc8/drivers/video/fbdev/core/fbcon.c linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon.c
--- linux-4.19-rc8/drivers/video/fbdev/core/fbcon.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon.c	2018-10-21 10:52:14.626212562 +0900
@@ -103,7 +103,8 @@
    enums.  */
 static int logo_shown = FBCON_LOGO_CANSHOW;
 /* Software scrollback */
-static int fbcon_softback_size = 32768;
+/*I need to use it out side fbcon.c */
+int fbcon_softback_size = 32768;
 static unsigned long softback_buf, softback_curr;
 static unsigned long softback_in;
 static unsigned long softback_top, softback_end;
@@ -197,6 +198,14 @@
 static void fbcon_exit(void);
 static struct device *fbcon_device;
 
+int fbcon_is_softback(const unsigned short *str)
+{
+	unsigned long p = (long)str;
+	if(p >= softback_buf && p <softback_end)
+		return 1;
+	return 0;
+}
+
 #ifdef CONFIG_FRAMEBUFFER_CONSOLE_ROTATION
 static inline void fbcon_set_rotation(struct fb_info *info)
 {
@@ -993,7 +1002,7 @@
 			if (!softback_buf) {
 				softback_buf =
 				    (unsigned long)
-				    kmalloc(fbcon_softback_size,
+				    kmalloc(fbcon_softback_size * 2,
 					    GFP_KERNEL);
 				if (!softback_buf) {
 					fbcon_softback_size = 0;
@@ -1023,7 +1032,8 @@
 		vc->vc_font.width = font->width;
 		vc->vc_font.height = font->height;
 		vc->vc_font.data = (void *)(p->fontdata = font->data);
-		vc->vc_font.charcount = 256; /* FIXME  Need to support more fonts */
+		// read charcount from font_desc, yep, finally fixed
+		vc->vc_font.charcount = font->charcount;
 	} else {
 		p->fontdata = vc->vc_font.data;
 	}
@@ -1081,6 +1091,7 @@
 						    fvc->vc_font.data);
 			vc->vc_font.width = fvc->vc_font.width;
 			vc->vc_font.height = fvc->vc_font.height;
+			vc->vc_font.charcount = fvc->vc_font.charcount;
 			p->userfont = t->userfont;
 
 			if (p->userfont)
@@ -1096,8 +1107,8 @@
 			vc->vc_font.width = font->width;
 			vc->vc_font.height = font->height;
 			vc->vc_font.data = (void *)(p->fontdata = font->data);
-			vc->vc_font.charcount = 256; /* FIXME  Need to
-							support more fonts */
+			// read charcount from font , finnaly fixed
+			vc->vc_font.charcount = font->charcount;
 		}
 	}
 
@@ -1324,10 +1335,7 @@
 
 static void fbcon_putc(struct vc_data *vc, int c, int ypos, int xpos)
 {
-	unsigned short chr;
-
-	scr_writew(c, &chr);
-	fbcon_putcs(vc, &chr, 1, ypos, xpos);
+	fbcon_putcs(vc, (unsigned short *)&c, 1, ypos, xpos);
 }
 
 static void fbcon_clear_margins(struct vc_data *vc, int bottom_only)
@@ -1401,6 +1409,7 @@
 		vc->vc_font.data = (void *)(p->fontdata = t->fontdata);
 		vc->vc_font.width = (*default_mode)->vc_font.width;
 		vc->vc_font.height = (*default_mode)->vc_font.height;
+		vc->vc_font.charcount = (*default_mode)->vc_font.charcount;
 		p->userfont = t->userfont;
 		if (p->userfont)
 			REFCOUNT(p->fontdata)++;
@@ -1579,6 +1588,7 @@
 static void fbcon_redraw_softback(struct vc_data *vc, struct display *p,
 				  long delta)
 {
+	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
 	int count = vc->vc_rows;
 	unsigned short *d, *s;
 	unsigned long n;
@@ -1641,6 +1651,8 @@
 					start = s;
 				}
 			}
+			if( ((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe) && scr_readw(s + (vc->vc_screenbuf_size >> 1)) != 0){
+			}else{
 			if (c == scr_readw(d)) {
 				if (s > start) {
 					fbcon_putcs(vc, start, s - start,
@@ -1652,6 +1664,7 @@
 					start++;
 				}
 			}
+			}
 			s++;
 			d++;
 		} while (s < le);
@@ -1734,6 +1747,7 @@
 			}
 
 			scr_writew(c, d);
+			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)), d + (vc->vc_screenbuf_size >> 1));
 			console_conditional_schedule();
 			s++;
 			d++;
@@ -1756,6 +1770,7 @@
 static void fbcon_redraw(struct vc_data *vc, struct display *p,
 			 int line, int count, int offset)
 {
+	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
 	unsigned short *d = (unsigned short *)
 	    (vc->vc_origin + vc->vc_size_row * line);
 	unsigned short *s = d + offset;
@@ -1778,18 +1793,22 @@
 					start = s;
 				}
 			}
-			if (c == scr_readw(d)) {
-				if (s > start) {
-					fbcon_putcs(vc, start, s - start,
-						     line, x);
-					x += s - start + 1;
-					start = s + 1;
-				} else {
-					x++;
-					start++;
+			if( ((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe) && scr_readw(s + (vc->vc_screenbuf_size >> 1)) != 0){
+			}else{
+				if (c == scr_readw(d)) {
+					if (s > start) {
+						fbcon_putcs(vc, start, s - start,
+							     line, x);
+						x += s - start + 1;
+						start = s + 1;
+					} else {
+						x++;
+						start++;
+					}
 				}
 			}
 			scr_writew(c, d);
+			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)), d + (vc->vc_screenbuf_size >> 1));
 			console_conditional_schedule();
 			s++;
 			d++;
@@ -1819,6 +1838,7 @@
 
 	while (count) {
 		scr_memcpyw((u16 *) softback_in, p, vc->vc_size_row);
+		scr_memcpyw((u16 *) softback_in + (fbcon_softback_size >> 1), p + (vc->vc_screenbuf_size >> 1), vc->vc_size_row);
 		count--;
 		p = advance_row(p, 1);
 		softback_in += vc->vc_size_row;
@@ -2433,7 +2453,6 @@
 
 	font->width = vc->vc_font.width;
 	font->height = vc->vc_font.height;
-	font->charcount = vc->vc_hi_font_mask ? 512 : 256;
 	if (!font->data)
 		return 0;
 
@@ -2738,6 +2757,19 @@
 	unsigned long p;
 	int line;
 	
+	if (offset < 0) {
+		offset = -offset - 1;
+		if (vc->vc_num != fg_console || !softback_lines)
+			return (u16 *)(vc->vc_origin + offset + (vc->vc_screenbuf_size));
+		line = offset / vc->vc_size_row;
+		if (line >= softback_lines)
+			return (u16 *) (vc->vc_origin + offset - softback_lines * vc->vc_size_row + (vc->vc_screenbuf_size));
+		p = softback_curr + offset;
+		if (p >= softback_end)
+			p += softback_buf - softback_end;
+		return (u16 *) (p + (fbcon_softback_size));
+	}
+
 	if (vc->vc_num != fg_console || !softback_lines)
 		return (u16 *) (vc->vc_origin + offset);
 	line = offset / vc->vc_size_row;
@@ -2845,6 +2877,8 @@
 					q -= vc->vc_size_row;
 					scr_memcpyw((u16 *) q, (u16 *) p,
 						    vc->vc_size_row);
+					scr_memcpyw((u16 *) (q + (vc->vc_screenbuf_size >> 1)), (u16 *) (p + (fbcon_softback_size >> 1)),
+						    vc->vc_size_row);
 				}
 				softback_in = softback_curr = p;
 				update_region(vc, vc->vc_origin,
diff -Naur linux-4.19-rc8/drivers/video/fbdev/core/fbcon.h linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon.h
--- linux-4.19-rc8/drivers/video/fbdev/core/fbcon.h	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon.h	2018-10-21 10:52:14.631213198 +0900
@@ -262,4 +262,7 @@
 #define fbcon_set_rotate(x) do {} while(0)
 #endif /* CONFIG_FRAMEBUFFER_CONSOLE_ROTATION */
 
+extern int fbcon_softback_size;
+extern int fbcon_is_softback(const unsigned short *str);
+
 #endif /* _VIDEO_FBCON_H */
diff -Naur linux-4.19-rc8/drivers/video/fbdev/core/fbcon_ccw.c linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon_ccw.c
--- linux-4.19-rc8/drivers/video/fbdev/core/fbcon_ccw.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon_ccw.c	2018-10-21 10:52:14.634213579 +0900
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+		u16 charmask);
 /*
  * Rotation 270 degrees
  */
@@ -105,13 +107,23 @@
 	u32 idx = (vc->vc_font.height + 7) >> 3;
 	u8 *src;
 
-	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
 
+	while (cnt--) {
+		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe )){
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_ccw(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		}else{
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			ccw_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s--;
 
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
@@ -230,6 +242,7 @@
 	int err = 1, dx, dy;
 	char *src;
 	u32 vyres = GETVYRES(ops->p->scrollmode, info);
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
 
 	if (!ops->fontbuffer)
 		return;
@@ -245,9 +258,19 @@
 			y += softback_lines;
 	}
 
- 	c = scr_readw((u16 *) vc->vc_pos);
+	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+
+	if(((c&charmask) == 0xff || (c & charmask) == 0xfe)){
+		char dst[16];
+		src = font_bits(vc,(const u16*)&c,cellsize,charmask);
+		memset(dst, 0, 16);
+		rotate_ccw(src, dst, vc->vc_font.width,
+			  vc->vc_font.height);
+		src = dst;
+	}else{
+		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	}
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -Naur linux-4.19-rc8/drivers/video/fbdev/core/fbcon_cw.c linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon_cw.c
--- linux-4.19-rc8/drivers/video/fbdev/core/fbcon_cw.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon_cw.c	2018-10-21 10:52:14.637213961 +0900
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+		u16 charmask);
 /*
  * Rotation 90 degrees
  */
@@ -89,14 +91,23 @@
 	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
 	u32 idx = (vc->vc_font.height + 7) >> 3;
 	u8 *src;
-
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s++) & charmask)*cellsize;
 
+		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe )){
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_cw(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		}else{
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			cw_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s++;
 
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
@@ -213,6 +224,7 @@
 	int err = 1, dx, dy;
 	char *src;
 	u32 vxres = GETVXRES(ops->p->scrollmode, info);
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
 
 	if (!ops->fontbuffer)
 		return;
@@ -230,7 +242,16 @@
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	if(((c&charmask) == 0xff || (c & charmask) == 0xfe)){
+		char dst[16];
+		src = font_bits(vc,(const u16*)&c,cellsize,charmask);
+		memset(dst, 0, 16);
+		rotate_cw(src, dst, vc->vc_font.width,
+			  vc->vc_font.height);
+		src = dst;
+	}else{
+		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
+	}
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -Naur linux-4.19-rc8/drivers/video/fbdev/core/fbcon_ud.c linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon_ud.c
--- linux-4.19-rc8/drivers/video/fbdev/core/fbcon_ud.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/drivers/video/fbdev/core/fbcon_ud.c	2018-10-21 10:52:14.640214342 +0900
@@ -18,6 +18,8 @@
 #include "fbcon.h"
 #include "fbcon_rotate.h"
 
+extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+		u16 charmask);
 /*
  * Rotation 180 degrees
  */
@@ -93,12 +95,22 @@
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
 
+		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe ) ){
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_ud(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		}else{
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			ud_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s--;
 
 		if (likely(idx == 1))
 			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
@@ -128,12 +140,21 @@
 	u8 *src;
 
 	while (cnt--) {
-		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
-
+		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe )){
+			char dst[16];
+			src = font_bits(vc,s,cellsize,charmask);
+			memset(dst, 0, 16);
+			rotate_ud(src, dst, vc->vc_font.width,
+				  vc->vc_font.height);
+			src = dst;
+		}else{
+			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+		}
 		if (attr) {
 			ud_update_attr(buf, src, attr, vc);
 			src = buf;
 		}
+		s--;
 
 		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
 					image->height, shift_high,
@@ -261,6 +282,7 @@
 	char *src;
 	u32 vyres = GETVYRES(ops->p->scrollmode, info);
 	u32 vxres = GETVXRES(ops->p->scrollmode, info);
+	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
 
 	if (!ops->fontbuffer)
 		return;
@@ -278,7 +300,18 @@
 
  	c = scr_readw((u16 *) vc->vc_pos);
 	attribute = get_attribute(info, c);
-	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
+	if(((c&charmask) == 0xff || (c & charmask) == 0xfe) ){
+		char dst[16];
+
+		src = font_bits(vc,(u16*)&c,cellsize,charmask);
+
+		memset(dst, 0, 16);
+		rotate_ud(src, dst, vc->vc_font.width,
+			  vc->vc_font.height);
+		src = dst;
+	}else{
+		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
+	}
 
 	if (ops->cursor_state.image.data != src ||
 	    ops->cursor_reset) {
diff -Naur linux-4.19-rc8/include/linux/font.h linux-4.19-rc8.i686/include/linux/font.h
--- linux-4.19-rc8/include/linux/font.h	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/include/linux/font.h	2018-10-21 10:52:14.643214723 +0900
@@ -19,6 +19,7 @@
     int width, height;
     const void *data;
     int pref;
+    int charcount;
 };
 
 #define VGA8x8_IDX	0
@@ -32,6 +33,7 @@
 #define ACORN8x8_IDX	8
 #define	MINI4x6_IDX	9
 #define FONT6x10_IDX	10
+#define FONT_16x16_CJK_IDX	11
 
 extern const struct font_desc	font_vga_8x8,
 			font_vga_8x16,
@@ -43,7 +45,8 @@
 			font_sun_12x22,
 			font_acorn_8x8,
 			font_mini_4x6,
-			font_6x10;
+			font_6x10,
+			font_16x16_cjk;
 
 /* Find a font with a specific name */
 
diff -Naur linux-4.19-rc8/lib/fonts/Kconfig linux-4.19-rc8.i686/lib/fonts/Kconfig
--- linux-4.19-rc8/lib/fonts/Kconfig	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/Kconfig	2018-10-21 10:52:14.646215105 +0900
@@ -109,8 +109,27 @@
 	  big letters (like the letters used in the SPARC PROM). If the
 	  standard font is unreadable for you, say Y, otherwise say N.
 
+config FONT_10x18
+	bool "console 10x18 font (not supported by all drivers)" if FONTS
+	depends on FRAMEBUFFER_CONSOLE
+	help
+	  This is a high resolution console font for machines with very
+	  big letters. It fits between the sun 12x22 and the normal 8x16 font.
+	  If other fonts are too big or too small for you, say Y, otherwise say N.
+
+config FONT_16x16_CJK
+	bool "console 16x16 CJK font ( cover BMP )" if FONTS
+	depends on FRAMEBUFFER_CONSOLE
+	depends on FB
+	depends on VT_CONSOLE
+	select CONSOLE_TRANSLATIONS
+	help
+	  This is a high resolution console font that covers UNICODE bmp,
+	  mostly is CJK font. If you want full UNICODE support on the VT console, say Y.
+
 config FONT_AUTOSELECT
 	def_bool y
+	depends on FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON
 	depends on !FONT_8x8
 	depends on !FONT_6x11
 	depends on !FONT_7x14
@@ -121,6 +140,6 @@
 	depends on !FONT_SUN8x16
 	depends on !FONT_SUN12x22
 	depends on !FONT_10x18
-	select FONT_8x16
+	select FONT_16x16_CJK
 
 endif # FONT_SUPPORT
diff -Naur linux-4.19-rc8/lib/fonts/Makefile linux-4.19-rc8.i686/lib/fonts/Makefile
--- linux-4.19-rc8/lib/fonts/Makefile	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/Makefile	2018-10-21 10:52:14.651215740 +0900
@@ -14,7 +14,9 @@
 font-objs-$(CONFIG_FONT_ACORN_8x8) += font_acorn_8x8.o
 font-objs-$(CONFIG_FONT_MINI_4x6)  += font_mini_4x6.o
 font-objs-$(CONFIG_FONT_6x10)      += font_6x10.o
+font-objs-$(CONFIG_FONT_16x16_CJK) += font_16x16_cjk.o
 
 font-objs += $(font-objs-y)
 
 obj-$(CONFIG_FONT_SUPPORT)         += font.o
+
diff -Naur linux-4.19-rc8/lib/fonts/font_10x18.c linux-4.19-rc8.i686/lib/fonts/font_10x18.c
--- linux-4.19-rc8/lib/fonts/font_10x18.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_10x18.c	2018-10-21 10:52:14.657216503 +0900
@@ -5144,4 +5144,5 @@
 #else
 	.pref	= -1,
 #endif
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_16x16_cjk.c linux-4.19-rc8.i686/lib/fonts/font_16x16_cjk.c
--- linux-4.19-rc8/lib/fonts/font_16x16_cjk.c	1970-01-01 09:00:00.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_16x16_cjk.c	2018-10-21 10:52:14.660216884 +0900
@@ -0,0 +1,24 @@
+/*************************************************/
+/*                                               */
+/*       Font file modified from 		 */
+/*  http://blog.chinaunix.net/u/13265/showart.php?id=1008020       */
+/*  microcaicai@gmail modifiy it to use in-kernel*/
+/*  font solution			         */
+/*                                               */
+/*************************************************/
+
+#include <linux/font.h>
+
+static const unsigned char fontdata_16x16[] = {
+	#include "font_cjk.h"
+};
+
+const struct font_desc font_16x16_cjk = {
+	.idx	= FONT_16x16_CJK_IDX,
+	.name	= "VGA_CJK",
+	.width	= 8, // have to do this to make curser appear 8dots length
+	.height	= 16,
+	.data	= fontdata_16x16,
+	.pref	= 10, // make it big enough to be selected
+	.charcount = 65535,
+};
diff -Naur linux-4.19-rc8/lib/fonts/font_6x11.c linux-4.19-rc8.i686/lib/fonts/font_6x11.c
--- linux-4.19-rc8/lib/fonts/font_6x11.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_6x11.c	2018-10-21 10:52:14.666217647 +0900
@@ -3350,4 +3350,5 @@
 	.data	= fontdata_6x11,
 	/* Try avoiding this font if possible unless on MAC */
 	.pref	= -2000,
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_7x14.c linux-4.19-rc8.i686/lib/fonts/font_7x14.c
--- linux-4.19-rc8/lib/fonts/font_7x14.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_7x14.c	2018-10-21 10:52:14.672218409 +0900
@@ -4116,4 +4116,5 @@
 	.height	= 14,
 	.data	= fontdata_7x14,
 	.pref	= 0,
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_8x16.c linux-4.19-rc8.i686/lib/fonts/font_8x16.c
--- linux-4.19-rc8/lib/fonts/font_8x16.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_8x16.c	2018-10-21 10:52:14.678219172 +0900
@@ -4630,5 +4630,6 @@
 	.height	= 16,
 	.data	= fontdata_8x16,
 	.pref	= 0,
+	.charcount = 255,
 };
 EXPORT_SYMBOL(font_vga_8x16);
diff -Naur linux-4.19-rc8/lib/fonts/font_8x8.c linux-4.19-rc8.i686/lib/fonts/font_8x8.c
--- linux-4.19-rc8/lib/fonts/font_8x8.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_8x8.c	2018-10-21 10:52:14.684219935 +0900
@@ -2581,4 +2581,5 @@
 	.height	= 8,
 	.data	= fontdata_8x8,
 	.pref	= 0,
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_acorn_8x8.c linux-4.19-rc8.i686/lib/fonts/font_acorn_8x8.c
--- linux-4.19-rc8/lib/fonts/font_acorn_8x8.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_acorn_8x8.c	2018-10-21 10:52:14.690220697 +0900
@@ -273,4 +273,5 @@
 #else
 	.pref	= 0,
 #endif
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_mini_4x6.c linux-4.19-rc8.i686/lib/fonts/font_mini_4x6.c
--- linux-4.19-rc8/lib/fonts/font_mini_4x6.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_mini_4x6.c	2018-10-21 10:52:14.693221079 +0900
@@ -2154,5 +2154,6 @@
 	.height	= 6,
 	.data	= fontdata_mini_4x6,
 	.pref	= 3,
+	.charcount = 255,
 };
 
diff -Naur linux-4.19-rc8/lib/fonts/font_pearl_8x8.c linux-4.19-rc8.i686/lib/fonts/font_pearl_8x8.c
--- linux-4.19-rc8/lib/fonts/font_pearl_8x8.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_pearl_8x8.c	2018-10-21 10:52:14.699221841 +0900
@@ -2585,4 +2585,5 @@
 	.height	= 8,
 	.data	= fontdata_pearl8x8,
 	.pref	= 2,
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_sun12x22.c linux-4.19-rc8.i686/lib/fonts/font_sun12x22.c
--- linux-4.19-rc8/lib/fonts/font_sun12x22.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_sun12x22.c	2018-10-21 10:52:14.705222604 +0900
@@ -6163,4 +6163,5 @@
 #else
 	.pref	= -1,
 #endif
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/font_sun8x16.c linux-4.19-rc8.i686/lib/fonts/font_sun8x16.c
--- linux-4.19-rc8/lib/fonts/font_sun8x16.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/font_sun8x16.c	2018-10-21 10:52:14.710223240 +0900
@@ -273,4 +273,5 @@
 #else
 	.pref	= -1,
 #endif
+	.charcount = 255,
 };
diff -Naur linux-4.19-rc8/lib/fonts/fonts.c linux-4.19-rc8.i686/lib/fonts/fonts.c
--- linux-4.19-rc8/lib/fonts/fonts.c	2018-10-15 14:20:24.000000000 +0900
+++ linux-4.19-rc8.i686/lib/fonts/fonts.c	2018-10-21 10:52:14.713223621 +0900
@@ -67,6 +67,10 @@
 #undef NO_FONTS
     &font_6x10,
 #endif
+#ifdef CONFIG_FONT_16x16_CJK
+#undef NO_FONTS
+    &font_16x16_cjk,
+#endif
 };
 
 #define num_fonts ARRAY_SIZE(fonts)
