#!/bin/sh -x

######################################################################
#url="https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.11.7.tar.xz
#    git://github.com/sfjro/aufs4-standalone.git"
version=4.19.7
url="https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-${version}.tar.xz 
	git://github.com/sfjro/aufs4-standalone.git"
pkgbase=kernel_headers
apply_arch="x86_64 i686 armv6l armv7l aarch64"
arch=`uname -m`
build=T1
src=linux-${version}
patchfiles="cjktty-kernel-4.19.patch cjktty-kernel-font-JP.patch overlayfs-allow_unprivileged_mounts.patch"
arm_patchfiles="rpi-4.19.7-20181209-172a80a.diff"
patchfiles_not_used="vd_unicon-kernel-20180826-4.18.patch vd_unicon-kernel-fonts-20140614.patch cjktty-kernel-font.patch tuxonice-for-linux-4.8.0-2016-10-08.patch 4.8-morse_code_panics.patch 4.8-panic_beep.patch"
configfile64="config-${version%.*}-x64"
configfile32="config-${version%.*}-x86"
configfileARMv6="config-${version%.*}-armv6l"
configfileARMv7="config-${version%.*}-armv7l"
configfileARM64="config-${version%.*}-aarch64"
case $arch in
    x86_64)
	vers=${version}_x64
	configfile=$configfile64
	;;
    i?86)
	vers=${version}_x86
	configfile=$configfile32
	;;
    armv6l)
	vers=${version}_armv6l
	configfile=$configfileARMv6
	;;
    armv7l)
	vers=${version}_armv7l
	configfile=$configfileARMv7
	;;
    *)
	vers=${version}_aarch64
	configfile=$configfileARM64
	;;
esac
git_branch=aufs4.19
aufs_git_vers=8feaac51328a45472fbe28df1c206d5b9670cd45
OPT_CONFIG=""
DOCS=""
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$1]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]} 
    cd ${B[$1]}

    patch -Np1 -i $W/source/aufs4-standalone/aufs4-kbuild.patch
    patch -Np1 -i $W/source/aufs4-standalone/aufs4-base.patch
    patch -Np1 -i $W/source/aufs4-standalone/aufs4-mmap.patch
    patch -Np1 -i $W/source/aufs4-standalone/aufs4-standalone.patch
    cp -av $W/source/aufs4-standalone/Documentation .
    cp -av $W/source/aufs4-standalone/fs .
    cp -pv $W/source/aufs4-standalone/include/uapi/linux/aufs_type.h include/uapi/linux
    if [ $arch == armv7l -o $arch == aarch64 ] ; then
	cat $W/$arm_patchfiles | patch -Np1 -i -
	chmod 755 drivers/net/wireless/realtek/rtl8192cu/{clean,runwpa,wlan0dhcp}
	chmod 755 scripts/{knlinfo,mkknlimg}
    fi
    cp -p $W/${configfile} .config
}

do_build() {
    cd ${B[$1]}
}

do_install() {
    cd ${B[$1]}
    make headers_install INSTALL_HDR_PATH=$P/usr

    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    find $P/usr/include \( -name ".install" -o -name "..install.cmd" \) \
	 -exec rm {} \;
}

do_package() {
    for i in $configfile64 $configfile32 $configfileARMv6 $configfileARMv7 $configfileARM64 $arm_patchfiles ; do
	cp $W/$i $docdir/$src/$i
	gzip $docdir/$src/$i
    done
    
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
