#!/bin/sh

if [ ! -d $SRC_DIR ]       ; then mkdir -p $SRC_DIR       ; fi
if [ ! -d $W/source ]      ; then mkdir -p $W/source      ; fi
if [ ! -d $W/build/$arch ] ; then mkdir -p $W/build/$arch ; fi

if  ! `echo ${apply_arch[@]} | grep -q "$arch"`  ; then
    echo "This package is not supported: $arch"
    exit 255
fi

if [ $# -eq 0 ] ; then
    opt_download=0 ; opt_prepare=1 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
    opt_download=0 ; opt_prepare=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
    for i in $@ ; do
	case $i in
	    download) opt_download=1 ;;
	    prepare) opt_prepare=1 ;;
	    config) opt_config=1 ;;
	    build) opt_build=1 ;;
	    package) opt_package=1 ;;
	esac
    done
fi

if [ $opt_download -eq 1 ] ; then
    for i in $url ; do
	case ${i##*.} in
	    svn)
		if [ ! -d `basename ${i##*/} .svn` ] ; then
		    svn co $i
		else
		    ( cd `basename ${i##*/} .svn` ; svn update )
		fi
		;;
	    git)
		if [ ! -d `basename ${i##*/} .git` ] ; then
		    git clone --recursive $i
		else
		    ( cd `basename ${i##*/} .git` ; git pull origin master )
		fi
		;;
	    hg)
		if [ ! -d `basename ${i##*/} .hg` ] ; then
		    hg clone ${i%.*}
		else
		    ( cd `basename ${i##*/} .hg` ; hg pull )
		fi
		;;
	    *)
		if [ ! -f ${i##*/} ] ; then
		    if [ -f ${SRC_DIR}/${i##*/} ] ;then
			cp ${SRC_DIR}/${i##*/} .
		    else
			wget ${SRC_URL}/${i##*/}
		    fi
		fi
		if [ ! -f ${i##*/} ] ; then
		    wget $i
		    for sig in asc sig{,n} {md5,sha{1,256}}{,sum} ; do
			if wget --spider $i.$sig ; then wget $i.$sig ; break ; fi
		    done
		    if [ -f ${i##*/}.$sig ] ; then
			case $sig in
			    asc|sig) gpg --verify ${i##*/}.$sig ;;
			    md5|sha1|sha256) ${sig}sum -c ${i##*/}.$sig ;;
			    *) $sig -c ${i##*/}.$sig ;;
			esac
			if [ $? -ne 0 ] ; then echo "archive verify failed" ; exit ; fi
		    fi
		fi
		if [ ! -f ${SRC_DIR}/${i##*/} ] ; then cp -p ${i##*/} ${SRC_DIR} ; fi
		;;
	esac
    done
    for i in $url ; do
	case ${i##*.} in
	    svn)
		( cd $W/source
		  if [ ! -d `basename ${i##*/} .svn` ] ; then
		      rm -rf `basename ${i##*/} .svn`
		  fi
		  cp -a $W/`basename ${i##*/} .svn` .
		  ( cd $W/source/`basename ${i##*/} .svn`
		    if [ -n "$svn_revision" ] ; then
			svn checkout -r $commitid
		    elif [ -n "$svn_branch" ] ; then
			svn checkout $git_branch
		    fi
		  )) ;;
	    git)
		( cd $W/source
		  if [ ! -d `basename ${i##*/} .git` ] ; then
		      rm -rf `basename ${i##*/} .git`
		  fi
		  cp -a $W/`basename ${i##*/} .git` .
		  ( cd $W/source/`basename ${i##*/} .git`
		    if [ -n "$commitid" ] ; then
			git reset --hard $commitid
		    elif [ -n "$git_branch" ] ; then
			git checkout $git_branch
		    fi
		    git set-file-times
		  )) ;;
	    hg)
		( cd $W/source
		  if [ -d `basename ${i##*/} .hg` ] ; then
		      rm -rf `basename ${i##*/} .hg`
		  fi
		  cp -a $W/`basename ${i##*/} .hg` .
		  ( cd $W/source/`basename ${i##*/} .hg`
		    if [ -n "$commitid" ] ; then
			hg update $commitid
		    elif [ -n "$hg_branch" ] ; then
			hg checkout $hg_branch
		    fi
		  )) ;;
	    jar)
		;;
	    zip)
		( cd $W/source ; unzip -o $W/${i##*/} ) ;;
	    *)
		( cd $W/source ; tar xpf $W/${i##*/} )  ;;
	esac
    done
fi

if [ $opt_prepare -eq 1 ] ; then
    ######################################################################
    # * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
    #   記述します。
    ######################################################################
    for i in `seq 0 $((${#B[@]} - 1))` ; do
	do_prepare $i
    done
fi

if [ $opt_config -eq 1 ] ; then
    for i in `seq 0 $((${#B[@]} - 1))` ; do
	do_config $i
    done
fi

if [ $opt_build -eq 1 ] ; then
    for i in `seq 0 $((${#B[@]} - 1))` ; do
	do_build $i
    done
fi

if [ $opt_package -eq 1 ] ; then
    if [ `id -u` -ne 0 ] ; then
	read -p "Do you want to package as root? [y/N] " ans
	if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
	    cd $W ; /bin/su -c "$0 package" ; exit
	fi
    fi
    if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
    if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
    for i in `seq 0 $((${#B[@]} - 1))` ; do
	do_install $i
    done
    ######################################################################
    # * make install でコピーされないファイルがある場合はここに記述します。
    ######################################################################
    mkdir -p $docdir/$src
    mkdir -p $srcdir
    if [ -d $P/usr/share/omf ]; then
	mkdir -p $P/install
	for omf in $P/usr/share/omf/* ; do
	    omf_name=`basename $omf`
	    cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/scrollkeeper-update ]; then
  scrollkeeper-update -p /var/lib/rarian -o /usr/share/omf/$omf_name
fi
EOF
	done
    fi

    if [ -d $P/etc/gconf/schemas ]; then
	mkdir -p $P/install
	for schema in $P/etc/gconf/schemas/* ; do
	    cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/gconftool-2 ]; then
  ( cd /etc/gconf/schemas ; GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule `basename $schema` )
fi
EOF
	done
    fi

    # remove locales except ja
    # 
    # for loc_dir in `find $P -name locale` ; do
    # 	pushd $loc_dir
    # 	for loc in * ; do
    # 	    if [ "$loc" != "ja" ]; then
    # 		rm -rf $loc
    # 	    fi
    # 	done
    # 	popd
    # done      

    ######################################################################
    # path に lib があるバイナリは strip -g, ないバイナリは strip する
    ######################################################################
    cd $P
    if [ "x$NOCOMPRESS" = "x" ]; then
	compress_all
    fi
    if [ -d $P/usr/share/man ]; then
	for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
	    gzip_dir $mdir
	done
    fi

    ######################################################################
    # * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
    #   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
    # * 他のアーカイブから追加したいファイルがある場合はここに記述します。
    ######################################################################
    cd $W
    for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
	for j in ${DOCS[$i]} ; do
	    for k in ${S[$i]}/$j ; do
		install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
		touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
		gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
	    done
	done
	#( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
    done

    for patch in $patchfiles ; do
	cp $W/$patch $srcdir/$patch
    done
    install $myname $srcdir

    ############################################################
    #   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
    #   紛れこみがちなので
    ############################################################

    chk_me=`whoami | grep root`
    if [ "$chk_me.x" != ".x" ]; then
	chown -R root.root $P/usr/share/doc
    fi

    ######################################################################
    # * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
    #   記述します(prune_symlink を使います)。
    # * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
    #   します(こだわりを求めないなら単に makepkg でも良いです)。
    ######################################################################
    #convert
    do_package
fi
