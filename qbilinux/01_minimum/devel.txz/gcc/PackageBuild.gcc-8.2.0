#!/bin/sh -x
##############################################################
pkgbase=gcc
vers=8.2.0
url="http://ftp.jaist.ac.jp/pub/GNU/gcc/gcc-${vers}/gcc-${vers}.tar.xz ftp://sourceware.org/pub/java/ecj-latest.jar"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=T3
src=gcc-${vers}
if [ $arch = "armv7l" ]; then
    build_arch=arm-pc-linux-gnueabihf
    libdir="lib"
    ARCH_CONFIG='--with-arch=armv6 --with-fpu=vfp --with-float=hard'
elif [ $arch = "aarch64" ]; then
    build_arch=${arch}-pc-linux-gnu
    libdir="lib64"
    ARCH_CONFIG=''
elif [ $arch = "x86_64" ]; then
    build_arch=${arch}-pc-linux-gnu
    libdir="lib64"
    ARCH_CONFIG='--enable-libmpx'
else
    build_arch=${arch}-pc-linux-gnu
    libdir="lib"
    ARCH_CONFIG='--enable-libmpx'
fi
OPT_CONFIG="--build=${build_arch} --host=${build_arch} --libexecdir=/usr/${libdir}
   --enable-languages=c,c++,fortran,go,lto 
   --enable-shared --enable-threads=posix --with-system-zlib --with-isl --enable-__cxa_atexit 
   --disable-libunwind-exceptions  --disable-libstdcxx-pch --enable-clocale=gnu --enable-gnu-unique-object 
   --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu 
   --enable-gnu-indirect-function --disable-multilib --disable-werror --enable-checking=release ${ARCH_CONFIG}"
DOCS='ABOUT-NLS COPYING COPYING.LIB COPYING.RUNTIME COPYING3 COPYING3.LIB ChangeLog ChangeLog.tree-ssa INSTALL MAINTAINERS NEWS README'
patchfiles=''
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
##############################################################'

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    mkdir ${B[$1]}
    cd ${B[$1]}
    if [ -x ../../../source/$src/configure ] ; then
       export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
       export LDFLAGS='-Wl,--as-needed' 
       ../../../source/$src/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    # add extra func
    mkdir -p $P/${libdir}
    ( cd $P/${libdir} ; ln -sf ../usr/bin/cpp . )
    ( cd $P/usr/bin ; ln -sf gcc cc )
}

do_package() {
    P2=$W/work2/$arch/${pkgbase}
    if [ -d $P2 ]; then
      rm -rf $P2
    fi

    mkdir -p $P2
    mv $P/* $P2

    # for GCC-core
    echo "building gcc-core"
    if [ -d $P ]; then rm -rf $P ; fi
    pkgbase=gcc
    pkg=$pkgbase-$vers-$arch-$build
    mkdir -p $P/usr/bin $P/usr/${libdir}
    for i in cpp cc gcc gccbug gcov gcov-tool gcov-dump ${build_arch}-gcc ${build_arch}-gcc-$vers ; do
	mv $P2/usr/bin/$i $P/usr/bin
    done
    # wrappers for LTO. 
    # need --enable-plugins at binutils configuration
    for i in ar nm ranlib ; do
	mv $P2/usr/bin/gcc-$i $P/usr/bin
	mv $P2/usr/bin/${build_arch}-gcc-$i $P/usr/bin
    done

    mkdir -p $P/lib
    ( cd $P/lib ; ln -sf ../usr/bin/cpp cpp )
    if [ $arch = "aarch64" ]; then
	mkdir -p $P/usr/lib
	mv $P2/usr/lib/gcc $P/usr/lib
    fi
    mv $P2/usr/${libdir}/gcc $P/usr/${libdir}
    mv $P2/usr/${libdir}/libgcc* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libgomp* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libmudflap* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libssp* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libatomic* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libitm* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libcc1* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libcilkrts* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libasan* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libtsan* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/liblsan* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libubsan* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libvtv* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libiberty* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libmpx* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libsanitizer* $P/usr/${libdir}/

    mkdir -p $P/usr/include
    mv $P2/usr/include/libiberty $P/usr/include

    mkdir -p $P/usr/share/{doc,info,man,locale}
    mkdir -p $P/usr/share/man/man{1,7}
    mkdir -p $P/usr/share/doc/gcc-$vers
    mv $P2/usr/share/doc/gcc-$vers/* $P/usr/share/doc/gcc-$vers
    for i in cpp cppinternals gcc gccinstall gccint libgomp libitm ; do
	mv $P2/usr/share/info/$i.info.gz $P/usr/share/info
    done
    mv $P2/usr/share/locale/* $P/usr/share/locale
    for i in cpp gcc gcov gcov-dump gcov-tool ; do
	mv $P2/usr/share/man/man1/$i.1.gz $P/usr/share/man/man1
    done
    for i in fsf-funding gfdl gpl ; do
	mv $P2/usr/share/man/man7/$i.7.gz $P/usr/share/man/man7
    done

    convert
    pushd $P
    /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF

    # for g++
    echo "building gcc-g++"
    popd
    pkgbase=g++
    pkg=$pkgbase-$vers-$arch-$build
    if [ -d $P ]; then rm -rf $P ; fi
    mkdir -p $P/usr/bin $P/usr/${libdir} $P/usr/include $P/usr/share
    for i in c++ g++ ${build_arch}-c++ ${build_arch}-g++ ; do
	mv $P2/usr/bin/$i $P/usr/bin
    done
    mkdir -p $P/usr/share/gdb/auto-load
    mv $P2/usr/${libdir}/libstdc++.so.*-gdb.py $P/usr/share/gdb/auto-load
    mv $P2/usr/${libdir}/libstdc++* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libsupc++* $P/usr/${libdir}/
    mv $P2/usr/include/c++ $P/usr/include
    mv $P2/usr/share/gcc-${vers} $P/usr/share/

    mkdir -p $P/usr/share/man/man1
    mv $P2/usr/share/man/man1/g++.1.gz $P/usr/share/man/man1
    convert
    pushd $P
    /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF

    # for fortran
    echo "building gcc-fortran"
    popd
    pkgbase=gfortran
    pkg=$pkgbase-$vers-$arch-$build
    if [ -d $P ]; then rm -rf $P ; fi
    mkdir -p $P/usr/bin $P/usr/${libdir} $P/usr/share/man/man1 $P/usr/share/info
    mv $P2/usr/bin/{gfortran,${build_arch}-gfortran} $P/usr/bin
    mv $P2/usr/${libdir}/libgfortran* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libquadmath* $P/usr/${libdir}/
    mv $P2/usr/share/info/gfortran.info.gz $P/usr/share/info/
    mv $P2/usr/share/info/libquadmath.info.gz $P/usr/share/info/
    mv $P2/usr/share/man/man1/gfortran.1.gz $P/usr/share/man/man1/

    convert
    pushd $P
    /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF

    # for GCC GO
    echo "building gcc-go"
    popd
    pkgbase=gcc_go
    pkg=$pkgbase-$vers-$arch-$build
    if [ -d $P ]; then rm -rf $P ; fi
    mkdir -p $P/usr/bin $P/usr/${libdir} $P/usr/share/man/man1 $P/usr/share/info
    mv $P2/usr/bin/{gccgo,${build_arch}-gccgo} $P/usr/bin
    mv $P2/usr/bin/{go,gofmt} $P/usr/bin
    mv $P2/usr/${libdir}/libgo* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/libnetgo* $P/usr/${libdir}/
    mv $P2/usr/${libdir}/go $P/usr/${libdir}/
    mv $P2/usr/share/info/gccgo.info.gz $P/usr/share/info/
    mv $P2/usr/share/man/man1/gccgo.1.gz $P/usr/share/man/man1
    mv $P2/usr/share/man/man1/{go,gofmt}.1.gz $P/usr/share/man/man1


    convert
    pushd $P
    /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
}

source /usr/src/qbilinux/PackageBuild.func
