#!/bin/sh
##############################################################
pkgbase=llvm
vers=7.0.1
url="http://llvm.org/releases/${vers}/llvm-${vers}.src.tar.xz
 http://llvm.org/releases/${vers}/cfe-${vers}.src.tar.xz
 http://llvm.org/releases/${vers}/compiler-rt-${vers}.src.tar.xz"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=1
src=llvm-${vers}.src
# these configs translated into cmake style
# OPT_CONFIG='--enable-libffi  
#            --enable-optimized
#            --enable-shared   
#            --enable-targets=all
#            --disable-assertions
#            --disable-debug-runtime
#            --disable-expensive-checks
#            --enable-experimental-targets=R600'
DOCS='CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT LLVMBuild.txt README.txt RELEASE_TESTERS.TXT'
patchfiles=''
compress=txz
SRC_URL="https://qbilinux.org/pub/source/"
SRC_DIR="/home/archives/source/"
##############################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]}
    cd ${B[$1]}
    cp -a $W/source/cfe-${vers}.src tools/clang

    if [ "$arch" != "armv7l" -a "$arch" != "aarch64" ]; then
	cp -a $W/source/compiler-rt-${vers}.src projects/compiler-rt
    fi

    if [ "$arch" != "armv7l" -a "$arch" != "aarch64" ]; then
	sed -r "/ifeq.*CompilerTargetArch/s#i386#i686#g" -i projects/compiler-rt/make/platform/clang_linux.mk
    fi

    if [ -d build_stage ]; then
	rm -rf build_stage
    fi
    mkdir build_stage ; cd build_stage

    export CC='clang'
    #export CXX='clang++ -v --std=c++11 -stdlib=libc++ -lc++abi'
    export CXX='clang++'

    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
    if [ "$arch" = "x86_64" -o "$arch" = "i686" ]; then
          HOST_TRIPLE="${arch}-pc-linux-gnu"
          TARGET_BUILD=all
	  CMAKE_FLAGS="-DLLVM_ENABLE_CXX1Y=ON -DLLVM_ENABLE_LIBCXX=ON -DCLANG_RESOURCE_DIR=../${libdir}/clang/${vers} -DBUILD_SHARED_LIBS=ON -DLLVM_LIBDIR_SUFFIX=${suffix} -DLLVM_REQUIRES_RTTI=ON -DLLVM_ENABLE_TIMESTAMPS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_ENABLE_PIC=ON -DLLVM_BINUTILS_INCDIR=/usr/include"
    elif [ "$arch" = "armv7l" ]; then
          HOST_TRIPLE='arm-pc-linux-gnueabihf'
          TARGET_BUILD="ARM;AArch64"
	  CMAKE_FLAGS='-DLLVM_BUILD_LLVM_DYLIB=ON -Wno-dev'
    else
          HOST_TRIPLE='aarch64-pc-linux-gnu'
          TARGET_BUILD="ARM;AArch64"
	  CMAKE_FLAGS='-DLLVM_BUILD_LLVM_DYLIB=ON -Wno-dev'
    fi 

    cmake -G "Unix Makefiles" \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLLVM_TARGETS_TO_BUILD=$TARGET_BUILD \
	-DLLVM_HOST_TRIPLE=$HOST_TRIPLE \
	${CMAKE_FLAGS} \
	..

    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}/build_stage
    if [ "$arch" = "x86_64" -o "$arch" = "i686" ]; then
	make REQUIRES_RTTI=1
    else
	make
    fi
    if [ -x /usr/bin/sphinx-build ]; then
	cd ..
	make -C docs -f Makefile.sphinx man
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}/build_stage
    make install DESTDIR=$P
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
