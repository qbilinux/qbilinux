#!/bin/sh

######################################################################
pkgbase=libc
vers=2.34
url="http://ftp.gnu.org/gnu/glibc/glibc-${vers}.tar.xz"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=1
src=glibc-$vers
OPT_CONFIG="--enable-kernel=3.2 --enable-obsolete-rpc --enable-obsolete-nsl"
DOCS="BUGS CONFORMANCE COPYING* ChangeLog* INSTALL LICENSES NEWS
    PROJECTS README"
compress=txz
patchfiles='glibc-2.26-fhs-1.patch'
SRC_URL="https://qbilinux.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$1]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    mkdir ${B[$1]}
    cd ${B[$1]}
    case $arch in
    i686)
      cat <<- "EOF" > configparms ;;
	CFLAGS += -march=i486 -mtune=native -O3 -pipe
	EOF
    x86_64)
      cat <<- "EOF" > configparms ;;
	slibdir=/lib64
	CFLAGS += -march=x86-64 -mtune=generic -O3 -pipe
	EOF
    armv7l)
      cat <<- "EOF" > configparms ;;
	CFLAGS += -march=armv7-a -mtune=native -O3 -pipe
	EOF
    aarch64)
      cat <<- "EOF" > configparms ;;
	slibdir=/lib64
	EOF
    esac
    if [ -x ${S[$1]}/configure ] ; then
      ${S[$1]}/configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
          --libdir='${exec_prefix}'/$libdir --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]} \
          --libexecdir=/usr/$libdir/glibc \
          --build=$arch-pc-linux --target=$arch-pc-linux
    fi
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    # add extra func
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
