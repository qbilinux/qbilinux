#!/bin/sh

######################################################################
pkgbase=lshw
vers=B.02.18
url="http://ezix.org/software/files/lshw-${vers}.tar.gz"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=1
src=$pkgbase-$vers
OPT_CONFIG=""
DOCS="README.md `echo docs/{Changelog,IODC.txt,TODO,proc_usb_info.txt}` COPYING"
patchfiles=""
compress=txz
SRC_URL="https://qbilinux.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]}
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make
	make gui
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install install-gui DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    # add extra func
    install -d $P/usr/share/polkit-1/actions
    cat <<- "EOF" > $P/usr/share/polkit-1/actions/org.plamolinux.pkexec.gtk-lshw.policy
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE policyconfig PUBLIC
	    "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
	    "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
	<policyconfig>
	  <action id="org.plamolinux.pkexec.gtk-lshw">
	    <message>Authentication is required to run the gtk-lshw</message>
	    <icon_name>gtk-lshw</icon_name>
	    <defaults>
	      <allow_any>auth_admin</allow_any>
	      <allow_inactive>auth_admin</allow_inactive>
	      <allow_active>auth_admin</allow_active>
	    </defaults>
	    <annotate key="org.freedesktop.policykit.exec.path">/usr/sbin/gtk-lshw</annotate>
	    <annotate key="org.freedesktop.policykit.exec.allow_gui">true</annotate>
	  </action>
	</policyconfig>
	EOF
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
