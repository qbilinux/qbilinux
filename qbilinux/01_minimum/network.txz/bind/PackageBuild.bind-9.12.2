#!/bin/sh

######################################################################
pkgbase=bind
vers=9.12.2
url="http://ftp.isc.org/isc/bind/${vers}/bind-${vers}.tar.gz
    http://www.internic.net/domain/named.root"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=T1
src=$pkgbase-${vers}
patchfiles=""
OPT_CONFIG="--with-libxml2=no --with-libtool"
DOCS="CHANGES COPYRIGHT FAQ HISTORY README"
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/plamo-nora/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    mkdir ${B[$1]}
    cd ${B[$1]}
    if [ -x ${S[$1]}/configure ] ; then
	export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
	export LDFLAGS='-Wl,--as-needed' 
	${S[$1]}/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc \
		--localstatedir=/var --infodir='${prefix}'/share/info --mandir='${prefix}'/share/man ${OPT_CONFIG[$1]}
    fi
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    for mk in `find . -name "[Mm]akefile" ` ; do
	sed -i -e 's|GCONFTOOL = /usr/bin/gconftool-2|GCONFTOOL = echo|' $mk
    done
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    # add extra func
    cat <<- "EOF" > $P/etc/named.conf.new
	// CACHING NAME SERVER
	options {
	  directory "/var/named";
	  // version statement - inhibited for security
	  // (avoids hacking any known weaknesses)	
	  version "not currently available";
	  // disables all zone transfer requests
	  allow-transfer {
	    "none";
	  };
	  // Closed DNS - permits only local IPs to issue queries
	  // remove if an Open DNS required to support all users
	  // or add additional IP ranges
	  // in this case either allow-query or allow-recursion can be used
	  allow-query {
	    192.168.1.0/24;
	  };
	};
	
	// log to /var/log/named.log events
	// from info UP in severity (no debug)
	// defaults to use 3 files in rotation
	// BIND 8.x logging MUST COME FIRST in this file
	// BIND 9.x parses the whole file before using the log
	// failure messages up to this point are in (syslog)
	// typically /var/log/messages
	logging {
	  channel example_log {
	    file "/var/log/named.log" versions 3 size 2m;
	    severity info;
	    print-severity yes;
	    print-time yes;
	    print-category yes;
	  };
	  category default {
	    example_log;
	  };
	};
	
	// required zone for recursive queries
	zone "." {
	  type hint;
	  file "named.root";
	};
	
	// required local host domain
	zone "localhost" in {
	  type master;
	  file "master.localhost";
	  allow-update {
	    none;
	  };
	};
	
	// localhost reverse map
	zone "0.0.127.in-addr.arpa" in {
	  type master;
	  file "localhost.rev";
	  allow-update {
	    none;
	  };
	};
EOF
  install -d $P/var/named
  cat <<- "EOF" | sed 's/^|//' > $P/var/named/master.localhost.new
	|$TTL 86400 ; 24 hours could have been written as 24h
	|$ORIGIN localhost.
	|; line below = localhost 1D IN SOA localhost root.localhost
	|@	1D	IN	SOA	@	root (
	|				2009073001	; serial
	|				3h		; refresh
	|				15		; retry
	|				1w		; expire
	|				3h		; minimum
	|			)
	|@	1D	IN	NS	@
	|	1D	IN	A	127.0.0.1
EOF
  chmod 600 $P/var/named/master.localhost.new
  cat <<- "EOF" | sed 's/^|//' > $P/var/named/localhost.rev.new
	|$TTL 86400
	|; could use $ORIGIN 0.0.127.IN-ADDR.ARPA.
	|@	IN	SOA	localhost. root.localhost. (
	|			1997022700	; serial
	|			3h		; refresh
	|			15		; retry
	|			1w		; expire
	|			3h		; minimum
	|		)
	|	IN	NS	localhost.
	|1	IN	PTR	localhost.
EOF
  chmod 600 $P/var/named/localhost.rev.new
  cp -p $W/named.root $P/var/named/named.root.new
  chown root.root $P/var/named/named.root.new
}

do_package() {
    install -d $P/install
    cat <<- "EOF" >> $P/install/doinst.sh
	
	named_config() {
	  mv var/named/$1.new /tmp
	  if [ -f var/named/$1 ] ; then
	    mv /tmp/$1.new var/named/$1.dist
	  else
	    mv /tmp/$1.new var/named/$1
	  fi
	}
	
	mv etc/named.conf.new /tmp
	if [ -f etc/named.conf ] ; then
	  mv /tmp/named.conf.new etc/named.conf.dist
	else
	  mv /tmp/named.conf.new etc/named.conf
	fi
	for i in master.localhost localhost.rev ; do
	  named_config $i
	done
	mv var/named/named.root.new /tmp
	if [ -f var/named/named.root ] ; then
	  if diff -q var/named/named.root.internic var/named/named.root \
	      > /dev/null 2>&1 ; then
	    mv var/named/named.root var/named/named.root.old
	    mv /tmp/named.root.new var/named/named.root
	    cp -p var/named/named.root var/named/named.root.internic
	    echo "New root hint file has been installed."
	    echo "Old one has been moved to /var/named/named.root.old."
	  else
	    mv /tmp/named.root.new var/named/named.root.internic
	    echo "You might have to update your root hint file."
	    echo "New one has been installed to /var/named/named.root.internic."
	  fi
	else
	  mv /tmp/named.root.new var/named/named.root
	  cp -p var/named/named.root var/named/named.root.internic
	  echo "New root hint file has been installed."
	fi
EOF

  for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/plamo-nora/PackageBuild.func
