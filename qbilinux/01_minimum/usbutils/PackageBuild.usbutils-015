#!/bin/sh
##############################################################
pkgbase=usbutils
vers=015
url="https://www.kernel.org/pub/linux/utils/usb/usbutils/usbutils-${vers}.tar.xz
	http://www.linux-usb.org/usb.ids"
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=1
src=usbutils-${vers}
if [ $arch == x86_64 -o $arch == aarch64 ] ; then
    OPT_CONFIG='--datadir=/usr/lib64'
else
    OPT_CONFIG='--datadir=/usr/lib'
fi
DOCS='AUTHORS COPYING ChangeLog INSTALL NEWS README'
patchfiles=''
compress=txz
SRC_URL=${SRC_URL:-"https://qbilinux.org/pub/source/"}
SRC_DIR=${SRC_DIR:-"/home/archives/source/"}
##############################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]}
    cd ${B[$1]}
    if [ -x ${S[$1]}/configure ] ; then
	export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
	export LDFLAGS='-Wl,--as-needed' 
	${S[$1]}/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc \
		--localstatedir=/var --infodir='${prefix}'/share/info --mandir='${prefix}'/share/man ${OPT_CONFIG[$1]}
    fi
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi

    install -d $P/usr/$libdir/
    cp $W/usb.ids $P/usr/$libdir/
#    install -d $P/etc/cron.weekly/
#cat > /etc/cron.weekly/update-usbids.sh << "EOF" &&
##!/bin/bash
#/usr/bin/wget http://www.linux-usb.org/usb.ids -O /usr/$libdir/usb.ids
#EOF
#chmod 754 $P/etc/cron.weekly/update-usbids.sh
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
