#!/bin/sh

######################################################################
url="ftp://ftp.afterstep.org/archives/Classic/AfterStepClassic-1.1beta2.tar.gz
    http://plamo.linet.gr.jp/~tamuki/src/AfterStepClassic-1.1beta2-linux.patch
    http://plamo.linet.gr.jp/~tamuki/src/AfterStepClassic-1.1beta2-fontset.patch
    http://plamo.linet.gr.jp/~tamuki/src/AfterStepClassic-1.1beta2-hide.patch
    http://plamo.linet.gr.jp/~tamuki/src/AfterStepClassic-1.1beta2-iconanim.patch
    http://plamo.linet.gr.jp/~tamuki/src/AfterStepClassic-1.1beta2-min_height.patch
    http://plamo.linet.gr.jp/~tamuki/src/AfterStepClassic-1.1beta2-asclock.patch
    http://www.tigr.net/afterstep/download/ascpu/ascpu-1.11.tar.gz
    http://www.tigr.net/afterstep/download/asmem/asmem-1.12.tar.gz
    http://www.tigr.net/afterstep/download/astime/astime-2.8.tar.gz
    http://plamo.linet.gr.jp/~tamuki/src/plamo_stepicons.tar.bz2
    http://plamo.linet.gr.jp/~tamuki/src/plamo_banner_lib32pack.tar.xz"
pkgbase=AfterStepClassic
vers=1.1beta2
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=T2
src[0]=$pkgbase-$vers
src[1]=ascpu-1.11
src[2]=asmem-1.12
src[3]=astime-2.8
OPT_CONFIG[0]=""
OPT_CONFIG[1]=""
OPT_CONFIG[2]=""
OPT_CONFIG[3]=""
DOCS[0]="CREDITS ChangeLog INSTALL FAQ README README.8bit module-interface.txt"
DOCS[1]="TODO LICENSE README INSTALL CHANGES"
DOCS[2]="LICENSE README INSTALL CHANGES"
DOCS[3]="README LICENSE INSTALL CHANGES"
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
######################################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
  patch -Np1 -i $W/AfterStepClassic-1.1beta2-linux.patch
  patch -Np1 -i $W/AfterStepClassic-1.1beta2-fontset.patch
  patch -Np0 -i $W/AfterStepClassic-1.1beta2-hide.patch
  patch -Np0 -i $W/AfterStepClassic-1.1beta2-iconanim.patch
  patch -Np0 -i $W/AfterStepClassic-1.1beta2-min_height.patch
  patch -Np1 -i $W/AfterStepClassic-1.1beta2-asclock.patch
  cp -p configure.h configure.h.orig
  sed "/^#define/s@lib@$libdir@g" configure.h.orig \
      | sed '/^#define/s@bin/X11@bin@g' > configure.h
  cp -p sample.steprc sample.steprc.orig
  sed '/^ModulePath/s@:.*@@g' sample.steprc.orig \
      | sed "/^ModulePath/s@lib@$libdir@g" \
      | sed '/^PixmapPath/s@$@:/usr/share/afterstep/icons@g' \
      | sed '/^ModulePath/!s@lib/X11@share@g' > sample.steprc
  cp -p autoconf/Makefile.common.in{,.orig}
  sed '/$(INSTALL/s@[[:graph:]]*$@$(DESTDIR)&@g' \
      autoconf/Makefile.common.in.orig > autoconf/Makefile.common.in
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    mkdir ${B[$1]}
    cd ${B[$1]}
    if [ -x ${S[$1]}/configure ] ; then
	export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
	export LDFLAGS='-Wl,--as-needed' 
	${S[$1]}/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc \
		--localstatedir=/var --infodir='${prefix}'/share/info --mandir='${prefix}'/share/man ${OPT_CONFIG[$1]}
    fi
    xmkmf -a
    for i in afterstep modules/{Audio,Auto,Wharf,Banner,Pager,asclock,Animate} ; do
	cp -p $i/Makefile $i/Makefile.orig
	sed '/MANPATH =/s@man@share/man@g' $i/Makefile.orig > $i/Makefile
    done
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    if [ -f Makefile ] ; then
	export LDFLAGS='-Wl,--as-needed'
	make install DESTDIR=$P
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
  for i in `seq 3` ; do
    cd ${B[$i]}
  done
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make clean
    fi
    if [ -f config.log ] ; then
      rm -rf config.cache config.log
    fi
    if [ -x configure ] ; then
      ./configure --prefix=/usr --libdir='${exec_prefix}'/$libdir \
          --infodir='${prefix}'/share/info \
          --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
    fi
  done
  cd ${B[0]}
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      make
    fi
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    if [ -f Makefile ] ; then
      case $i in
      0) make install install.man DESTDIR=$P ;;
      *) make install DESTDIR=$P ;;
      esac
    fi
  done
  cd ${B[0]}
  install -d $P/usr/share/afterstep/{icons,backgrounds,sounds}
  find icons -maxdepth 1 -name "*.xpm" \
      -exec install -m 644 {} $P/usr/share/afterstep/icons \;
  find backgrounds -name "*.jpg" \
      -exec install -m 644 {} $P/usr/share/afterstep/backgrounds \;
  find sounds -name "*.au" \
      -exec install -m 644 {} $P/usr/share/afterstep/sounds \;
  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et \
      -exec touch -t `date '+%m%d0000'` {} \;
  compress
  strip_bindir $P/usr/$libdir/X11/afterstep
  cp -p afterstep/plamo_banner $P/usr/$libdir/X11/afterstep
  chown -R root.root $P/usr/$libdir/X11/afterstep/plamo_banner
  touch -t `date '+%m%d0000'` $P/usr/$libdir/X11/afterstep
  if [ $arch == x86_64 ] ; then
    cp -a lib $P
    cp -a usr/lib $P/usr
    chown -R root.root {$P,$P/usr}/lib
    ln -s libc-2.20.so $P/lib/libc.so.6
    ln -s libdl-2.20.so $P/lib/libdl.so.2
    ln -s ld-2.20.so $P/lib/ld-linux.so.2
    ln -s libX11.so.6.3.0 $P/usr/lib/libX11.so.6
    ln -s libxcb.so.1.1.0 $P/usr/lib/libxcb.so.1
    ln -s libXau.so.6.0.0 $P/usr/lib/libXau.so.6
    ln -s libXdmcp.so.6.0.0 $P/usr/lib/libXdmcp.so.6
  fi
  cp -a pixmaps $P/usr/share
  chown -R root.root $P/usr/share/pixmaps
  cp -a backgrounds $P/usr/share/pixmaps
  chown -R root.root $P/usr/share/pixmaps/backgrounds
  touch -r pixmaps $P/usr/share/pixmaps
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0000'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done
  convert
  if [ $arch == x86_64 ] ; then
    for i in {$P,$P/usr}/lib ; do prune_symlink $i ; done
  fi
  tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
  tar rvpf $pkg.tar -C $P usr/$libdir/X11/afterstep
  if [ $arch == x86_64 ] ; then
    tar rvpf $pkg.tar -C $P `cd $P ; find lib | tail -n+2`
    tar rvpf $pkg.tar -C $P `cd $P ; find usr/lib | tail -n+2`
  fi
  tar rvpf $pkg.tar -C $P usr/share/afterstep
  tar rvpf $pkg.tar -C $P usr/share/pixmaps
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
  tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/doc -maxdepth 1 | tail -n+2`
  if [ $arch == x86_64 ] ; then
    tar rvpf $pkg.tar -C $P install/doinst.sh
  fi
  touch -t `date '+%m%d0000'` $pkg.tar ; xz $pkg.tar ; touch $pkg.tar.xz
  mv $pkg.tar.xz $pkg.txz
fi
