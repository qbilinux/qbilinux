diff -Nrc linux-5.4/drivers/tty/vt/selection.c linux-cjktty-5.4-utf8/drivers/tty/vt/selection.c
*** linux-5.4/drivers/tty/vt/selection.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/tty/vt/selection.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 330,335 ****
--- 330,337 ----
  			}
  			obp = bp;
  		}
+ 		if (c > 0x80)
+ 			i += 2;
  	}
  	sel_buffer_lth = bp - sel_buffer;
  	return 0;
diff -Nrc linux-5.4/drivers/tty/vt/vt.c linux-cjktty-5.4-utf8/drivers/tty/vt/vt.c
*** linux-5.4/drivers/tty/vt/vt.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/tty/vt/vt.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 304,309 ****
--- 304,323 ----
  	return p;
  }
  
+ static inline unsigned short *screenpos_utf8(struct vc_data *vc, int offset, int viewed)
+ {
+ 	unsigned short *p;
+ 
+ 	if (!viewed)
+ 		p = (unsigned short *)(vc->vc_origin + offset + vc->vc_screenbuf_size);
+ 	else if (!vc->vc_sw->con_screen_pos)
+ 		p = (unsigned short *)(vc->vc_visible_origin + offset + vc->vc_screenbuf_size);
+ 	else
+ 		p = vc->vc_sw->con_screen_pos(vc, -offset - 1);
+ 	return p;
+ }
+  
+ 
  /* Called  from the keyboard irq path.. */
  static inline void scrolldelta(int lines)
  {
***************
*** 646,651 ****
--- 660,670 ----
  	}
  	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
  	scr_memsetw(clear, vc->vc_video_erase_char, vc->vc_size_row * nr);
+ 
+ 	d += (vc->vc_screenbuf_size >> 1);
+ 	s += (vc->vc_screenbuf_size >> 1);
+ 	scr_memmovew(d, s, (b - t - nr) * vc->vc_size_row);
+ 	scr_memsetw(d + (b - t - nr) * vc->vc_cols, 0, vc->vc_size_row * nr);
  }
  
  static void do_update_region(struct vc_data *vc, unsigned long start, int count)
***************
*** 807,812 ****
--- 826,833 ----
  	static int old_offset = -1;
  	static unsigned short old;
  	static unsigned short oldx, oldy;
+ 	static unsigned short *p_ext = NULL;
+ 	static unsigned short old_ext = 0;
  
  	WARN_CONSOLE_UNLOCKED();
  
***************
*** 814,820 ****
  	    old_offset < vc->vc_screenbuf_size) {
  		scr_writew(old, screenpos(vc, old_offset, 1));
  		if (con_should_update(vc))
! 			vc->vc_sw->con_putc(vc, old, oldy, oldx);
  		notify_update(vc);
  	}
  
--- 835,841 ----
  	    old_offset < vc->vc_screenbuf_size) {
  		scr_writew(old, screenpos(vc, old_offset, 1));
  		if (con_should_update(vc))
! 			vc->vc_sw->con_putc(vc, (old_ext << 16)|old, oldy, oldx);
  		notify_update(vc);
  	}
  
***************
*** 825,837 ****
  		unsigned short new;
  		unsigned short *p;
  		p = screenpos(vc, offset, 1);
  		old = scr_readw(p);
  		new = old ^ vc->vc_complement_mask;
  		scr_writew(new, p);
  		if (con_should_update(vc)) {
  			oldx = (offset >> 1) % vc->vc_cols;
  			oldy = (offset >> 1) / vc->vc_cols;
! 			vc->vc_sw->con_putc(vc, new, oldy, oldx);
  		}
  		notify_update(vc);
  	}
--- 846,860 ----
  		unsigned short new;
  		unsigned short *p;
  		p = screenpos(vc, offset, 1);
+ 		p_ext = screenpos_utf8(vc, offset, 1);
  		old = scr_readw(p);
+ 		old_ext = scr_readw(p_ext);
  		new = old ^ vc->vc_complement_mask;
  		scr_writew(new, p);
  		if (con_should_update(vc)) {
  			oldx = (offset >> 1) % vc->vc_cols;
  			oldy = (offset >> 1) / vc->vc_cols;
! 			vc->vc_sw->con_putc(vc, (old_ext << 16)|new, oldy, oldx);
  		}
  		notify_update(vc);
  	}
***************
*** 1139,1145 ****
  	    vc->vc_screenbuf_size > KMALLOC_MAX_SIZE || !vc->vc_screenbuf_size)
  		goto err_free;
  	err = -ENOMEM;
! 	vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size, GFP_KERNEL);
  	if (!vc->vc_screenbuf)
  		goto err_free;
  
--- 1162,1168 ----
  	    vc->vc_screenbuf_size > KMALLOC_MAX_SIZE || !vc->vc_screenbuf_size)
  		goto err_free;
  	err = -ENOMEM;
! 	vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size * 2, GFP_KERNEL);
  	if (!vc->vc_screenbuf)
  		goto err_free;
  
***************
*** 1193,1199 ****
  {
  	unsigned long old_origin, new_origin, new_scr_end, rlth, rrem, err = 0;
  	unsigned long end;
! 	unsigned int old_rows, old_row_size, first_copied_row;
  	unsigned int new_cols, new_rows, new_row_size, new_screen_size;
  	unsigned int user;
  	unsigned short *oldscreen, *newscreen;
--- 1216,1222 ----
  {
  	unsigned long old_origin, new_origin, new_scr_end, rlth, rrem, err = 0;
  	unsigned long end;
! 	unsigned int old_rows, old_row_size, first_copied_row, old_screen_size;
  	unsigned int new_cols, new_rows, new_row_size, new_screen_size;
  	unsigned int user;
  	unsigned short *oldscreen, *newscreen;
***************
*** 1214,1226 ****
  	new_rows = (lines ? lines : vc->vc_rows);
  	new_row_size = new_cols << 1;
  	new_screen_size = new_row_size * new_rows;
  
  	if (new_cols == vc->vc_cols && new_rows == vc->vc_rows)
  		return 0;
  
  	if (new_screen_size > KMALLOC_MAX_SIZE || !new_screen_size)
  		return -EINVAL;
! 	newscreen = kzalloc(new_screen_size, GFP_USER);
  	if (!newscreen)
  		return -ENOMEM;
  
--- 1237,1252 ----
  	new_rows = (lines ? lines : vc->vc_rows);
  	new_row_size = new_cols << 1;
  	new_screen_size = new_row_size * new_rows;
+ 	old_screen_size = old_rows * old_row_size;
  
  	if (new_cols == vc->vc_cols && new_rows == vc->vc_rows)
  		return 0;
  
  	if (new_screen_size > KMALLOC_MAX_SIZE || !new_screen_size)
  		return -EINVAL;
! 
! 	newscreen = kmalloc(new_screen_size * 2, GFP_USER);
! 
  	if (!newscreen)
  		return -ENOMEM;
  
***************
*** 1285,1299 ****
  	while (old_origin < end) {
  		scr_memcpyw((unsigned short *) new_origin,
  			    (unsigned short *) old_origin, rlth);
! 		if (rrem)
  			scr_memsetw((void *)(new_origin + rlth),
  				    vc->vc_video_erase_char, rrem);
  		old_origin += old_row_size;
  		new_origin += new_row_size;
  	}
! 	if (new_scr_end > new_origin)
  		scr_memsetw((void *)new_origin, vc->vc_video_erase_char,
  			    new_scr_end - new_origin);
  	oldscreen = vc->vc_screenbuf;
  	vc->vc_screenbuf = newscreen;
  	vc->vc_screenbuf_size = new_screen_size;
--- 1311,1333 ----
  	while (old_origin < end) {
  		scr_memcpyw((unsigned short *) new_origin,
  			    (unsigned short *) old_origin, rlth);
!  		scr_memcpyw((unsigned short *) new_origin + (new_screen_size >> 1),
!  			    (unsigned short *) old_origin + (old_screen_size >> 1), rlth);
! 		if (rrem){
  			scr_memsetw((void *)(new_origin + rlth),
  				    vc->vc_video_erase_char, rrem);
+ 			scr_memsetw((void *)(new_origin + rlth + (new_screen_size)),
+ 				    vc->vc_video_erase_char, rrem);
+ 		}
  		old_origin += old_row_size;
  		new_origin += new_row_size;
  	}
! 	if (new_scr_end > new_origin){
  		scr_memsetw((void *)new_origin, vc->vc_video_erase_char,
  			    new_scr_end - new_origin);
+ 		scr_memsetw((void *)new_origin + (new_screen_size), vc->vc_video_erase_char,
+ 			    new_scr_end - new_origin);
+ 	}
  	oldscreen = vc->vc_screenbuf;
  	vc->vc_screenbuf = newscreen;
  	vc->vc_screenbuf_size = new_screen_size;
***************
*** 2638,2643 ****
--- 2672,2679 ----
  		rescan = 0;
  		inverse = 0;
  		width = 1;
+ 		vc->vc_utf = 1;
+ 		vc->vc_disp_ctrl = 0;
  
  		/* Do no translation at all in control states */
  		if (vc->vc_state != ESnormal) {
***************
*** 2705,2711 ****
  				continue;
  			    }
  			}
! 			/* Nothing to do if an ASCII byte was received */
  		    }
  		    /* End of UTF-8 decoding. */
  		    /* c is the received character, or U+FFFD for invalid sequences. */
--- 2741,2747 ----
  				continue;
  			    }
  			}
! 
  		    }
  		    /* End of UTF-8 decoding. */
  		    /* c is the received character, or U+FFFD for invalid sequences. */
***************
*** 2793,2803 ****
  				}
  				if (vc->vc_decim)
  					insert_char(vc, 1);
! 				vc_uniscr_putc(vc, next_c);
! 				scr_writew(himask ?
! 					     ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
! 					     (vc_attr << 8) + tc,
! 					   (u16 *) vc->vc_pos);
  				if (con_should_update(vc) && draw_x < 0) {
  					draw_x = vc->vc_x;
  					draw_from = vc->vc_pos;
--- 2829,2858 ----
  				}
  				if (vc->vc_decim)
  					insert_char(vc, 1);
! 
! 				if(is_double_width(c) && width==2)
! 				{
! 					tc = 0xFF;
! 					scr_writew(himask ?
! 							 ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
! 							 (vc_attr << 8) + tc,
! 						   (u16 *) vc->vc_pos);
! 					scr_writew(c, (u16 *) vc->vc_pos + (vc->vc_screenbuf_size >> 1));
! 				}else if(is_double_width(c) && width==1){
! 					tc = 0xFE;
! 					scr_writew(himask ?
! 							 ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
! 							 (vc_attr << 8) + tc,
! 						   (u16 *) vc->vc_pos);
! 					scr_writew(c, (u16 *) vc->vc_pos + (vc->vc_screenbuf_size >> 1));
! 				}else{
! 					scr_writew(himask ?
! 							 ((vc_attr << 8) & ~himask) + ((tc & 0x100) ? himask : 0) + (tc & 0xff) :
! 							 (vc_attr << 8) + tc,
! 						   (u16 *) vc->vc_pos);
! 					scr_writew(c, (u16 *) vc->vc_pos + (vc->vc_screenbuf_size >> 1));
! 				}
! 
  				if (con_should_update(vc) && draw_x < 0) {
  					draw_x = vc->vc_x;
  					draw_from = vc->vc_pos;
***************
*** 2814,2827 ****
  
  				tc = conv_uni_to_pc(vc, ' '); /* A space is printed in the second column */
  				if (tc < 0) tc = ' ';
! 				next_c = ' ';
  			}
- 			notify_write(vc, c);
  
! 			if (inverse)
! 				con_flush(vc, draw_from, draw_to, &draw_x);
  
! 			if (rescan) {
  				rescan = 0;
  				inverse = 0;
  				width = 1;
--- 2869,2880 ----
  
  				tc = conv_uni_to_pc(vc, ' '); /* A space is printed in the second column */
  				if (tc < 0) tc = ' ';
! 
  			}
  
! 			notify_write(vc, c);
  
!       if (rescan) {
  				rescan = 0;
  				inverse = 0;
  				width = 1;
***************
*** 3404,3410 ****
  		tty_port_init(&vc->port);
  		visual_init(vc, currcons, 1);
  		/* Assuming vc->vc_{cols,rows,screenbuf_size} are sane here. */
! 		vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size, GFP_NOWAIT);
  		vc_init(vc, vc->vc_rows, vc->vc_cols,
  			currcons || !vc->vc_sw->con_save_screen);
  	}
--- 3457,3463 ----
  		tty_port_init(&vc->port);
  		visual_init(vc, currcons, 1);
  		/* Assuming vc->vc_{cols,rows,screenbuf_size} are sane here. */
! 		vc->vc_screenbuf = kzalloc(vc->vc_screenbuf_size * 2, GFP_NOWAIT);
  		vc_init(vc, vc->vc_rows, vc->vc_cols,
  			currcons || !vc->vc_sw->con_save_screen);
  	}
***************
*** 4643,4648 ****
--- 4696,4706 ----
  
  int con_font_op(struct vc_data *vc, struct console_font_op *op)
  {
+ 	/* IF WE ENABLE CJK font, I won't let you guys set console font any way until
+ 	   we found a way to set console font that is unicode capable
+ 	 */
+ 	if(vc->vc_font.charcount > op->charcount)
+ 		return 0;
  	switch (op->op) {
  	case KD_FONT_OP_SET:
  		return con_font_set(vc, op);
***************
*** 4666,4674 ****
  	u16 w = scr_readw(screenpos(vc, offset, 1));
  	u16 c = w & 0xff;
  
! 	if (w & vc->vc_hi_font_mask)
! 		c |= 0x100;
! 	return c;
  }
  EXPORT_SYMBOL_GPL(screen_glyph);
  
--- 4724,4738 ----
  	u16 w = scr_readw(screenpos(vc, offset, 1));
  	u16 c = w & 0xff;
  
! 	u16 c_utf8 = scr_readw(screenpos_utf8(vc, offset, 1));
! 
! 	if ( (c == 0xff || c == 0xfe) && c_utf8 != 0){
! 		return c_utf8;
! 	}else{
! 		if (w & vc->vc_hi_font_mask)
! 			c |= 0x100;
! 		return c;
! 	}
  }
  EXPORT_SYMBOL_GPL(screen_glyph);
  
diff -Nrc linux-5.4/drivers/video/console/Kconfig linux-cjktty-5.4-utf8/drivers/video/console/Kconfig
*** linux-5.4/drivers/video/console/Kconfig	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/console/Kconfig	2019-12-19 00:40:45.000000000 +0900
***************
*** 144,149 ****
--- 144,150 ----
  config FRAMEBUFFER_CONSOLE_ROTATION
         bool "Framebuffer Console Rotation"
         depends on FRAMEBUFFER_CONSOLE
+        depends on !FONT_16x16_CJK
         help
           Enable display rotation for the framebuffer console.  This is done
           in software and may be significantly slower than a normally oriented
diff -Nrc linux-5.4/drivers/video/console/Makefile linux-cjktty-5.4-utf8/drivers/video/console/Makefile
*** linux-5.4/drivers/video/console/Makefile	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/console/Makefile	2019-12-19 00:40:45.000000000 +0900
***************
*** 3,8 ****
--- 3,9 ----
  # 5 Aug 1999, James Simmons, <mailto:jsimmons@users.sf.net>
  # Rewritten to use lists instead of if-statements.
  
+ # Font handling
  obj-$(CONFIG_DUMMY_CONSOLE)       += dummycon.o
  obj-$(CONFIG_SGI_NEWPORT_CONSOLE) += newport_con.o
  obj-$(CONFIG_STI_CONSOLE)         += sticon.o sticore.o
diff -Nrc linux-5.4/drivers/video/fbdev/core/bitblit.c linux-cjktty-5.4-utf8/drivers/video/fbdev/core/bitblit.c
*** linux-5.4/drivers/video/fbdev/core/bitblit.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/fbdev/core/bitblit.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 10,15 ****
--- 10,16 ----
   *  more details.
   */
  
+ #include <linux/font.h>
  #include <linux/module.h>
  #include <linux/slab.h>
  #include <linux/string.h>
***************
*** 43,48 ****
--- 44,64 ----
  	}
  }
  
+ static inline u16 utf8_pos(struct vc_data *vc, const unsigned short *utf8)
+ {
+ 	unsigned long p = (long)utf8;
+ 	if (p >= vc->vc_origin && p < vc->vc_scr_end) {
+ 		return scr_readw((unsigned short *)(p + vc->vc_screenbuf_size));
+ 	} else if (vc->vc_num == fg_console && fbcon_is_softback(utf8)){
+ 		return scr_readw((unsigned short *)(p + fbcon_softback_size));
+ 	} else {
+ 		u16 extra_c;
+ 		int c = *(int*)utf8;
+ 		extra_c = (c >> 16 ) & 0x0000ffff;
+ 		return extra_c;
+ 	}
+ }
+ 
  static void bit_bmove(struct vc_data *vc, struct fb_info *info, int sy,
  		      int sx, int dy, int dx, int height, int width)
  {
***************
*** 74,79 ****
--- 90,123 ----
  	info->fbops->fb_fillrect(info, &region);
  }
  
+ u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+ 					u16 charmask)
+ {
+ 	u32	utf8_c;
+ 
+ 	u8 *src = vc->vc_font.data + (scr_readw(s)&
+ 				  charmask)*cellsize;
+ 
+ 	utf8_c = utf8_pos(vc, s);
+ 
+ 	if( utf8_c <= vc->vc_font.charcount)
+ 	{
+ 		/*
+ 		 * decide left-half char or right-half char.
+ 		 * Since non-English chars may double weight
+ 		 */
+ 		switch (scr_readw(s) & charmask) {
+ 			case 0xff:
+ 				src = vc->vc_font.data + (utf8_c * cellsize *2 );
+ 				break;
+ 			case 0xfe:
+ 				src = vc->vc_font.data + (utf8_c * cellsize *2 + cellsize);
+ 				break;
+ 		}
+ 	}
+ 	return src;
+ }
+ 
  static inline void bit_putcs_aligned(struct vc_data *vc, struct fb_info *info,
  				     const u16 *s, u32 attr, u32 cnt,
  				     u32 d_pitch, u32 s_pitch, u32 cellsize,
***************
*** 84,97 ****
  	u8 *src;
  
  	while (cnt--) {
! 		src = vc->vc_font.data + (scr_readw(s++)&
! 					  charmask)*cellsize;
  
  		if (attr) {
  			update_attr(buf, src, attr, vc);
  			src = buf;
  		}
- 
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
  						image->height);
--- 128,139 ----
  	u8 *src;
  
  	while (cnt--) {
! 		src = font_bits(vc,s++,cellsize,charmask);
  
  		if (attr) {
  			update_attr(buf, src, attr, vc);
  			src = buf;
  		}
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
  						image->height);
***************
*** 119,132 ****
  	u8 *src;
  
  	while (cnt--) {
! 		src = vc->vc_font.data + (scr_readw(s++)&
! 					  charmask)*cellsize;
! 
  		if (attr) {
  			update_attr(buf, src, attr, vc);
  			src = buf;
  		}
- 
  		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
  					image->height, shift_high,
  					shift_low, mod);
--- 161,171 ----
  	u8 *src;
  
  	while (cnt--) {
! 		src = font_bits(vc,s++,cellsize,charmask);
  		if (attr) {
  			update_attr(buf, src, attr, vc);
  			src = buf;
  		}
  		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
  					image->height, shift_high,
  					shift_low, mod);
***************
*** 245,250 ****
--- 284,291 ----
  	int err = 1;
  	char *src;
  
+ 	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
+ 
  	cursor.set = 0;
  
  	if (softback_lines) {
***************
*** 258,264 ****
  
   	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	src = vc->vc_font.data + ((c & charmask) * (w * vc->vc_font.height));
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
--- 299,305 ----
  
   	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	src = font_bits(vc,(u16*)vc->vc_pos,cellsize,charmask);
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
diff -Nrc linux-5.4/drivers/video/fbdev/core/fbcon.c linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon.c
*** linux-5.4/drivers/video/fbdev/core/fbcon.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 123,129 ****
     enums.  */
  static int logo_shown = FBCON_LOGO_CANSHOW;
  /* Software scrollback */
! static int fbcon_softback_size = 32768;
  static unsigned long softback_buf, softback_curr;
  static unsigned long softback_in;
  static unsigned long softback_top, softback_end;
--- 123,130 ----
     enums.  */
  static int logo_shown = FBCON_LOGO_CANSHOW;
  /* Software scrollback */
! /*I need to use it out side fbcon.c */
! int fbcon_softback_size = 32768;
  static unsigned long softback_buf, softback_curr;
  static unsigned long softback_in;
  static unsigned long softback_top, softback_end;
***************
*** 216,221 ****
--- 217,230 ----
  static void fbcon_exit(void);
  static struct device *fbcon_device;
  
+ int fbcon_is_softback(const unsigned short *str)
+ {
+ 	unsigned long p = (long)str;
+ 	if(p >= softback_buf && p <softback_end)
+ 		return 1;
+ 	return 0;
+ }
+ 
  #ifdef CONFIG_FRAMEBUFFER_CONSOLE_ROTATION
  static inline void fbcon_set_rotation(struct fb_info *info)
  {
***************
*** 1019,1028 ****
  	if (info->fix.type != FB_TYPE_TEXT) {
  		if (fbcon_softback_size) {
  			if (!softback_buf) {
! 				softback_buf =
! 				    (unsigned long)
! 				    kvmalloc(fbcon_softback_size,
! 					    GFP_KERNEL);
  				if (!softback_buf) {
  					fbcon_softback_size = 0;
  					softback_top = 0;
--- 1028,1034 ----
  	if (info->fix.type != FB_TYPE_TEXT) {
  		if (fbcon_softback_size) {
  			if (!softback_buf) {
! 				softback_buf = (unsigned long) kmalloc(fbcon_softback_size * 2, GFP_KERNEL);
  				if (!softback_buf) {
  					fbcon_softback_size = 0;
  					softback_top = 0;
***************
*** 1051,1057 ****
  		vc->vc_font.width = font->width;
  		vc->vc_font.height = font->height;
  		vc->vc_font.data = (void *)(p->fontdata = font->data);
! 		vc->vc_font.charcount = 256; /* FIXME  Need to support more fonts */
  	} else {
  		p->fontdata = vc->vc_font.data;
  	}
--- 1057,1064 ----
  		vc->vc_font.width = font->width;
  		vc->vc_font.height = font->height;
  		vc->vc_font.data = (void *)(p->fontdata = font->data);
! 		// read charcount from font_desc, yep, finally fixed
! 		vc->vc_font.charcount = font->charcount;
  	} else {
  		p->fontdata = vc->vc_font.data;
  	}
***************
*** 1115,1120 ****
--- 1122,1128 ----
  						    fvc->vc_font.data);
  			vc->vc_font.width = fvc->vc_font.width;
  			vc->vc_font.height = fvc->vc_font.height;
+ 			vc->vc_font.charcount = fvc->vc_font.charcount;
  			p->userfont = t->userfont;
  
  			if (p->userfont)
***************
*** 1130,1137 ****
  			vc->vc_font.width = font->width;
  			vc->vc_font.height = font->height;
  			vc->vc_font.data = (void *)(p->fontdata = font->data);
! 			vc->vc_font.charcount = 256; /* FIXME  Need to
! 							support more fonts */
  		}
  	}
  
--- 1138,1145 ----
  			vc->vc_font.width = font->width;
  			vc->vc_font.height = font->height;
  			vc->vc_font.data = (void *)(p->fontdata = font->data);
! 			// read charcount from font , finnaly fixed
! 			vc->vc_font.charcount = font->charcount;
  		}
  	}
  
***************
*** 1357,1366 ****
  
  static void fbcon_putc(struct vc_data *vc, int c, int ypos, int xpos)
  {
! 	unsigned short chr;
! 
! 	scr_writew(c, &chr);
! 	fbcon_putcs(vc, &chr, 1, ypos, xpos);
  }
  
  static void fbcon_clear_margins(struct vc_data *vc, int bottom_only)
--- 1365,1371 ----
  
  static void fbcon_putc(struct vc_data *vc, int c, int ypos, int xpos)
  {
! 	fbcon_putcs(vc, (unsigned short *)&c, 1, ypos, xpos);
  }
  
  static void fbcon_clear_margins(struct vc_data *vc, int bottom_only)
***************
*** 1434,1439 ****
--- 1439,1445 ----
  		vc->vc_font.data = (void *)(p->fontdata = t->fontdata);
  		vc->vc_font.width = (*default_mode)->vc_font.width;
  		vc->vc_font.height = (*default_mode)->vc_font.height;
+ 		vc->vc_font.charcount = (*default_mode)->vc_font.charcount;
  		p->userfont = t->userfont;
  		if (p->userfont)
  			REFCOUNT(p->fontdata)++;
***************
*** 1612,1617 ****
--- 1618,1624 ----
  static void fbcon_redraw_softback(struct vc_data *vc, struct fbcon_display *p,
  				  long delta)
  {
+ 	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
  	int count = vc->vc_rows;
  	unsigned short *d, *s;
  	unsigned long n;
***************
*** 1674,1679 ****
--- 1681,1688 ----
  					start = s;
  				}
  			}
+ 			if( ((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe) && scr_readw(s + (vc->vc_screenbuf_size >> 1)) != 0){
+ 			}else{
  			if (c == scr_readw(d)) {
  				if (s > start) {
  					fbcon_putcs(vc, start, s - start,
***************
*** 1685,1690 ****
--- 1694,1700 ----
  					start++;
  				}
  			}
+ 			}
  			s++;
  			d++;
  		} while (s < le);
***************
*** 1767,1772 ****
--- 1777,1783 ----
  			}
  
  			scr_writew(c, d);
+ 			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)), d + (vc->vc_screenbuf_size >> 1));
  			console_conditional_schedule();
  			s++;
  			d++;
***************
*** 1789,1794 ****
--- 1800,1806 ----
  static void fbcon_redraw(struct vc_data *vc, struct fbcon_display *p,
  			 int line, int count, int offset)
  {
+ 	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
  	unsigned short *d = (unsigned short *)
  	    (vc->vc_origin + vc->vc_size_row * line);
  	unsigned short *s = d + offset;
***************
*** 1811,1828 ****
  					start = s;
  				}
  			}
! 			if (c == scr_readw(d)) {
! 				if (s > start) {
! 					fbcon_putcs(vc, start, s - start,
! 						     line, x);
! 					x += s - start + 1;
! 					start = s + 1;
! 				} else {
! 					x++;
! 					start++;
  				}
  			}
  			scr_writew(c, d);
  			console_conditional_schedule();
  			s++;
  			d++;
--- 1823,1844 ----
  					start = s;
  				}
  			}
! 			if( ((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe) && scr_readw(s + (vc->vc_screenbuf_size >> 1)) != 0){
! 			}else{
! 				if (c == scr_readw(d)) {
! 					if (s > start) {
! 						fbcon_putcs(vc, start, s - start,
! 							     line, x);
! 						x += s - start + 1;
! 						start = s + 1;
! 					} else {
! 						x++;
! 						start++;
! 					}
  				}
  			}
  			scr_writew(c, d);
+ 			scr_writew(scr_readw(s + (vc->vc_screenbuf_size >> 1)), d + (vc->vc_screenbuf_size >> 1));
  			console_conditional_schedule();
  			s++;
  			d++;
***************
*** 1852,1857 ****
--- 1868,1874 ----
  
  	while (count) {
  		scr_memcpyw((u16 *) softback_in, p, vc->vc_size_row);
+ 		scr_memcpyw((u16 *) softback_in + (fbcon_softback_size >> 1), p + (vc->vc_screenbuf_size >> 1), vc->vc_size_row);
  		count--;
  		p = advance_row(p, 1);
  		softback_in += vc->vc_size_row;
***************
*** 2455,2461 ****
  
  	font->width = vc->vc_font.width;
  	font->height = vc->vc_font.height;
- 	font->charcount = vc->vc_hi_font_mask ? 512 : 256;
  	if (!font->data)
  		return 0;
  
--- 2472,2477 ----
***************
*** 2760,2765 ****
--- 2776,2794 ----
  	unsigned long p;
  	int line;
  	
+ 	if (offset < 0) {
+ 		offset = -offset - 1;
+ 		if (vc->vc_num != fg_console || !softback_lines)
+ 			return (u16 *)(vc->vc_origin + offset + (vc->vc_screenbuf_size));
+ 		line = offset / vc->vc_size_row;
+ 		if (line >= softback_lines)
+ 			return (u16 *) (vc->vc_origin + offset - softback_lines * vc->vc_size_row + (vc->vc_screenbuf_size));
+ 		p = softback_curr + offset;
+ 		if (p >= softback_end)
+ 			p += softback_buf - softback_end;
+ 		return (u16 *) (p + (fbcon_softback_size));
+ 	}
+ 
  	if (vc->vc_num != fg_console || !softback_lines)
  		return (u16 *) (vc->vc_origin + offset);
  	line = offset / vc->vc_size_row;
***************
*** 2867,2872 ****
--- 2896,2903 ----
  					q -= vc->vc_size_row;
  					scr_memcpyw((u16 *) q, (u16 *) p,
  						    vc->vc_size_row);
+ 					scr_memcpyw((u16 *) (q + (vc->vc_screenbuf_size >> 1)), (u16 *) (p + (fbcon_softback_size >> 1)),
+ 						    vc->vc_size_row);
  				}
  				softback_in = softback_curr = p;
  				update_region(vc, vc->vc_origin,
diff -Nrc linux-5.4/drivers/video/fbdev/core/fbcon.h linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon.h
*** linux-5.4/drivers/video/fbdev/core/fbcon.h	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon.h	2019-12-19 00:40:45.000000000 +0900
***************
*** 262,265 ****
--- 262,274 ----
  #define fbcon_set_rotate(x) do {} while(0)
  #endif /* CONFIG_FRAMEBUFFER_CONSOLE_ROTATION */
  
+ #ifdef CONFIG_DMI
+ int fbcon_platform_get_rotate(struct fb_info *info);
+ #else
+ #define fbcon_platform_get_rotate(i) FB_ROTATE_UR
+ #endif /* CONFIG_DMI */
+ 
+ extern int fbcon_softback_size;
+ extern int fbcon_is_softback(const unsigned short *str);
+ 
  #endif /* _VIDEO_FBCON_H */
diff -Nrc linux-5.4/drivers/video/fbdev/core/fbcon_ccw.c linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon_ccw.c
*** linux-5.4/drivers/video/fbdev/core/fbcon_ccw.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon_ccw.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 18,23 ****
--- 18,25 ----
  #include "fbcon.h"
  #include "fbcon_rotate.h"
  
+ extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+ 		u16 charmask);
  /*
   * Rotation 270 degrees
   */
***************
*** 105,117 ****
  	u32 idx = (vc->vc_font.height + 7) >> 3;
  	u8 *src;
  
- 	while (cnt--) {
- 		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
  
  		if (attr) {
  			ccw_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
  
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
--- 107,129 ----
  	u32 idx = (vc->vc_font.height + 7) >> 3;
  	u8 *src;
  
  
+ 	while (cnt--) {
+ 		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe )){
+ 			char dst[16];
+ 			src = font_bits(vc,s,cellsize,charmask);
+ 			memset(dst, 0, 16);
+ 			rotate_ccw(src, dst, vc->vc_font.width,
+ 				  vc->vc_font.height);
+ 			src = dst;
+ 		}else{
+ 			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+ 		}
  		if (attr) {
  			ccw_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
+ 		s--;
  
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
***************
*** 230,235 ****
--- 242,248 ----
  	int err = 1, dx, dy;
  	char *src;
  	u32 vyres = GETVYRES(ops->p->scrollmode, info);
+ 	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
  
  	if (!ops->fontbuffer)
  		return;
***************
*** 245,253 ****
  			y += softback_lines;
  	}
  
!  	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
--- 258,276 ----
  			y += softback_lines;
  	}
  
! 	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 
! 	if(((c&charmask) == 0xff || (c & charmask) == 0xfe)){
! 		char dst[16];
! 		src = font_bits(vc,(const u16*)&c,cellsize,charmask);
! 		memset(dst, 0, 16);
! 		rotate_ccw(src, dst, vc->vc_font.width,
! 			  vc->vc_font.height);
! 		src = dst;
! 	}else{
! 		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
! 	}
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
diff -Nrc linux-5.4/drivers/video/fbdev/core/fbcon_cw.c linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon_cw.c
*** linux-5.4/drivers/video/fbdev/core/fbcon_cw.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon_cw.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 18,23 ****
--- 18,25 ----
  #include "fbcon.h"
  #include "fbcon_rotate.h"
  
+ extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+ 		u16 charmask);
  /*
   * Rotation 90 degrees
   */
***************
*** 89,102 ****
  	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
  	u32 idx = (vc->vc_font.height + 7) >> 3;
  	u8 *src;
- 
  	while (cnt--) {
- 		src = ops->fontbuffer + (scr_readw(s++) & charmask)*cellsize;
  
  		if (attr) {
  			cw_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
  
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
--- 91,113 ----
  	u16 charmask = vc->vc_hi_font_mask ? 0x1ff : 0xff;
  	u32 idx = (vc->vc_font.height + 7) >> 3;
  	u8 *src;
  	while (cnt--) {
  
+ 		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe )){
+ 			char dst[16];
+ 			src = font_bits(vc,s,cellsize,charmask);
+ 			memset(dst, 0, 16);
+ 			rotate_cw(src, dst, vc->vc_font.width,
+ 				  vc->vc_font.height);
+ 			src = dst;
+ 		}else{
+ 			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+ 		}
  		if (attr) {
  			cw_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
+ 		s++;
  
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
***************
*** 213,218 ****
--- 224,230 ----
  	int err = 1, dx, dy;
  	char *src;
  	u32 vxres = GETVXRES(ops->p->scrollmode, info);
+ 	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
  
  	if (!ops->fontbuffer)
  		return;
***************
*** 230,236 ****
  
   	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
--- 242,257 ----
  
   	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	if(((c&charmask) == 0xff || (c & charmask) == 0xfe)){
! 		char dst[16];
! 		src = font_bits(vc,(const u16*)&c,cellsize,charmask);
! 		memset(dst, 0, 16);
! 		rotate_cw(src, dst, vc->vc_font.width,
! 			  vc->vc_font.height);
! 		src = dst;
! 	}else{
! 		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.width));
! 	}
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
diff -Nrc linux-5.4/drivers/video/fbdev/core/fbcon_ud.c linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon_ud.c
*** linux-5.4/drivers/video/fbdev/core/fbcon_ud.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/drivers/video/fbdev/core/fbcon_ud.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 18,23 ****
--- 18,25 ----
  #include "fbcon.h"
  #include "fbcon_rotate.h"
  
+ extern u8 * font_bits(struct vc_data *vc, const u16 *s,u32 cellsize,
+ 		u16 charmask);
  /*
   * Rotation 180 degrees
   */
***************
*** 93,104 ****
  	u8 *src;
  
  	while (cnt--) {
- 		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
  
  		if (attr) {
  			ud_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
  
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
--- 95,116 ----
  	u8 *src;
  
  	while (cnt--) {
  
+ 		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe ) ){
+ 			char dst[16];
+ 			src = font_bits(vc,s,cellsize,charmask);
+ 			memset(dst, 0, 16);
+ 			rotate_ud(src, dst, vc->vc_font.width,
+ 				  vc->vc_font.height);
+ 			src = dst;
+ 		}else{
+ 			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
+ 		}
  		if (attr) {
  			ud_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
+ 		s--;
  
  		if (likely(idx == 1))
  			__fb_pad_aligned_buffer(dst, d_pitch, src, idx,
***************
*** 128,139 ****
  	u8 *src;
  
  	while (cnt--) {
! 		src = ops->fontbuffer + (scr_readw(s--) & charmask)*cellsize;
! 
  		if (attr) {
  			ud_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
  
  		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
  					image->height, shift_high,
--- 140,160 ----
  	u8 *src;
  
  	while (cnt--) {
! 		if(((scr_readw(s) & charmask) == 0xff || (scr_readw(s) & charmask) == 0xfe )){
! 			char dst[16];
! 			src = font_bits(vc,s,cellsize,charmask);
! 			memset(dst, 0, 16);
! 			rotate_ud(src, dst, vc->vc_font.width,
! 				  vc->vc_font.height);
! 			src = dst;
! 		}else{
! 			src = ops->fontbuffer + (scr_readw(s) & charmask)*cellsize;
! 		}
  		if (attr) {
  			ud_update_attr(buf, src, attr, vc);
  			src = buf;
  		}
+ 		s--;
  
  		fb_pad_unaligned_buffer(dst, d_pitch, src, idx,
  					image->height, shift_high,
***************
*** 261,266 ****
--- 282,288 ----
  	char *src;
  	u32 vyres = GETVYRES(ops->p->scrollmode, info);
  	u32 vxres = GETVXRES(ops->p->scrollmode, info);
+ 	int cellsize = DIV_ROUND_UP(vc->vc_font.width,8) * vc->vc_font.height;
  
  	if (!ops->fontbuffer)
  		return;
***************
*** 278,284 ****
  
   	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
--- 300,317 ----
  
   	c = scr_readw((u16 *) vc->vc_pos);
  	attribute = get_attribute(info, c);
! 	if(((c&charmask) == 0xff || (c & charmask) == 0xfe) ){
! 		char dst[16];
! 
! 		src = font_bits(vc,(u16*)&c,cellsize,charmask);
! 
! 		memset(dst, 0, 16);
! 		rotate_ud(src, dst, vc->vc_font.width,
! 			  vc->vc_font.height);
! 		src = dst;
! 	}else{
! 		src = ops->fontbuffer + ((c & charmask) * (w * vc->vc_font.height));
! 	}
  
  	if (ops->cursor_state.image.data != src ||
  	    ops->cursor_reset) {
diff -Nrc linux-5.4/include/linux/font.h linux-cjktty-5.4-utf8/include/linux/font.h
*** linux-5.4/include/linux/font.h	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/include/linux/font.h	2019-12-19 00:40:45.000000000 +0900
***************
*** 19,24 ****
--- 19,25 ----
      int width, height;
      const void *data;
      int pref;
+     int charcount;
  };
  
  #define VGA8x8_IDX	0
***************
*** 33,38 ****
--- 34,40 ----
  #define	MINI4x6_IDX	9
  #define FONT6x10_IDX	10
  #define TER16x32_IDX	11
+ #define FONT_16x16_CJK_IDX	13
  
  extern const struct font_desc	font_vga_8x8,
  			font_vga_8x16,
***************
*** 45,51 ****
  			font_acorn_8x8,
  			font_mini_4x6,
  			font_6x10,
! 			font_ter_16x32;
  
  /* Find a font with a specific name */
  
--- 47,54 ----
  			font_acorn_8x8,
  			font_mini_4x6,
  			font_6x10,
! 			font_ter_16x32,
! 			font_16x16_cjk;
  
  /* Find a font with a specific name */
  
diff -Nrc linux-5.4/lib/fonts/Kconfig linux-cjktty-5.4-utf8/lib/fonts/Kconfig
*** linux-5.4/lib/fonts/Kconfig	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/Kconfig	2019-12-19 00:40:45.000000000 +0900
***************
*** 119,126 ****
--- 119,137 ----
  	  This is the high resolution, large version for use with HiDPI screens.
  	  If the standard font is unreadable for you, say Y, otherwise say N.
  
+ config FONT_16x16_CJK
+ 	bool "console 16x16 CJK font ( cover BMP )" if FONTS
+ 	depends on FRAMEBUFFER_CONSOLE
+ 	depends on FB
+ 	depends on VT_CONSOLE
+ 	select CONSOLE_TRANSLATIONS
+ 	help
+ 	  This is a high resolution console font that covers UNICODE bmp,
+ 	  mostly is CJK font. If you want full UNICODE support on the VT console, say Y.
+ 
  config FONT_AUTOSELECT
  	def_bool y
+ 	depends on FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON
  	depends on !FONT_8x8
  	depends on !FONT_6x11
  	depends on !FONT_7x14
***************
*** 132,137 ****
--- 143,149 ----
  	depends on !FONT_SUN12x22
  	depends on !FONT_10x18
  	depends on !FONT_TER16x32
+ 	select FONT_16x16_CJK
  	select FONT_8x16
  
  endif # FONT_SUPPORT
diff -Nrc linux-5.4/lib/fonts/Makefile linux-cjktty-5.4-utf8/lib/fonts/Makefile
*** linux-5.4/lib/fonts/Makefile	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/Makefile	2019-12-19 00:40:45.000000000 +0900
***************
*** 15,21 ****
--- 15,23 ----
  font-objs-$(CONFIG_FONT_MINI_4x6)  += font_mini_4x6.o
  font-objs-$(CONFIG_FONT_6x10)      += font_6x10.o
  font-objs-$(CONFIG_FONT_TER16x32)  += font_ter16x32.o
+ font-objs-$(CONFIG_FONT_16x16_CJK) += font_16x16_cjk.o
  
  font-objs += $(font-objs-y)
  
  obj-$(CONFIG_FONT_SUPPORT)         += font.o
+ 
diff -Nrc linux-5.4/lib/fonts/font_10x18.c linux-cjktty-5.4-utf8/lib/fonts/font_10x18.c
*** linux-5.4/lib/fonts/font_10x18.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_10x18.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 5144,5147 ****
--- 5144,5148 ----
  #else
  	.pref	= -1,
  #endif
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_16x16_cjk.c linux-cjktty-5.4-utf8/lib/fonts/font_16x16_cjk.c
*** linux-5.4/lib/fonts/font_16x16_cjk.c	1970-01-01 09:00:00.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_16x16_cjk.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 0 ****
--- 1,24 ----
+ /*************************************************/
+ /*                                               */
+ /*       Font file modified from 		 */
+ /*  http://blog.chinaunix.net/u/13265/showart.php?id=1008020       */
+ /*  microcaicai@gmail modifiy it to use in-kernel*/
+ /*  font solution			         */
+ /*                                               */
+ /*************************************************/
+ 
+ #include <linux/font.h>
+ 
+ static const unsigned char fontdata_16x16[] = {
+ 	#include "font_cjk.h"
+ };
+ 
+ const struct font_desc font_16x16_cjk = {
+ 	.idx	= FONT_16x16_CJK_IDX,
+ 	.name	= "VGA_CJK",
+ 	.width	= 8, // have to do this to make curser appear 8dots length
+ 	.height	= 16,
+ 	.data	= fontdata_16x16,
+ 	.pref	= 10, // make it big enough to be selected
+ 	.charcount = 65535,
+ };
diff -Nrc linux-5.4/lib/fonts/font_6x11.c linux-cjktty-5.4-utf8/lib/fonts/font_6x11.c
*** linux-5.4/lib/fonts/font_6x11.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_6x11.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 3350,3353 ****
--- 3350,3354 ----
  	.data	= fontdata_6x11,
  	/* Try avoiding this font if possible unless on MAC */
  	.pref	= -2000,
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_7x14.c linux-cjktty-5.4-utf8/lib/fonts/font_7x14.c
*** linux-5.4/lib/fonts/font_7x14.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_7x14.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 4116,4119 ****
--- 4116,4120 ----
  	.height	= 14,
  	.data	= fontdata_7x14,
  	.pref	= 0,
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_8x16.c linux-cjktty-5.4-utf8/lib/fonts/font_8x16.c
*** linux-5.4/lib/fonts/font_8x16.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_8x16.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 4630,4634 ****
--- 4630,4635 ----
  	.height	= 16,
  	.data	= fontdata_8x16,
  	.pref	= 0,
+ 	.charcount = 255,
  };
  EXPORT_SYMBOL(font_vga_8x16);
diff -Nrc linux-5.4/lib/fonts/font_8x8.c linux-cjktty-5.4-utf8/lib/fonts/font_8x8.c
*** linux-5.4/lib/fonts/font_8x8.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_8x8.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 2581,2584 ****
--- 2581,2585 ----
  	.height	= 8,
  	.data	= fontdata_8x8,
  	.pref	= 0,
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_acorn_8x8.c linux-cjktty-5.4-utf8/lib/fonts/font_acorn_8x8.c
*** linux-5.4/lib/fonts/font_acorn_8x8.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_acorn_8x8.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 273,276 ****
--- 273,277 ----
  #else
  	.pref	= 0,
  #endif
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_mini_4x6.c linux-cjktty-5.4-utf8/lib/fonts/font_mini_4x6.c
*** linux-5.4/lib/fonts/font_mini_4x6.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_mini_4x6.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 2154,2158 ****
--- 2154,2159 ----
  	.height	= 6,
  	.data	= fontdata_mini_4x6,
  	.pref	= 3,
+ 	.charcount = 255,
  };
  
diff -Nrc linux-5.4/lib/fonts/font_pearl_8x8.c linux-cjktty-5.4-utf8/lib/fonts/font_pearl_8x8.c
*** linux-5.4/lib/fonts/font_pearl_8x8.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_pearl_8x8.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 2585,2588 ****
--- 2585,2589 ----
  	.height	= 8,
  	.data	= fontdata_pearl8x8,
  	.pref	= 2,
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_sun12x22.c linux-cjktty-5.4-utf8/lib/fonts/font_sun12x22.c
*** linux-5.4/lib/fonts/font_sun12x22.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_sun12x22.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 6163,6166 ****
--- 6163,6167 ----
  #else
  	.pref	= -1,
  #endif
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/font_sun8x16.c linux-cjktty-5.4-utf8/lib/fonts/font_sun8x16.c
*** linux-5.4/lib/fonts/font_sun8x16.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/font_sun8x16.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 273,276 ****
--- 273,277 ----
  #else
  	.pref	= -1,
  #endif
+ 	.charcount = 255,
  };
diff -Nrc linux-5.4/lib/fonts/fonts.c linux-cjktty-5.4-utf8/lib/fonts/fonts.c
*** linux-5.4/lib/fonts/fonts.c	2019-11-25 09:32:01.000000000 +0900
--- linux-cjktty-5.4-utf8/lib/fonts/fonts.c	2019-12-19 00:40:45.000000000 +0900
***************
*** 57,62 ****
--- 57,66 ----
  #ifdef CONFIG_FONT_TER16x32
  	&font_ter_16x32,
  #endif
+ #ifdef CONFIG_FONT_16x16_CJK
+ #undef NO_FONTS
+ 	&font_16x16_cjk,
+ #endif
  };
  
  #define num_fonts ARRAY_SIZE(fonts)
