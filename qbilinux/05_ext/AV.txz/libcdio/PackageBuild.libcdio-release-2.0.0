#!/bin/sh
##############################################################
pkgbase="libcdio_release"
vers=2.0.0
url='https://ftp.gnu.org/gnu/libcdio/libcdio-2.0.0.tar.gz'
commitid=
apply_arch="x86_64 i686 armv7l aarch64"
arch=`uname -m`
build=T2
src=libcdio-${vers}
OPT_CONFIG=''
DOCS='AUTHORS COPYING INSTALL NEWS README README.develop README.libcdio THANKS TODO'
patchfiles=''
compress=txz
SRC_URL="http://circle2.org/pub/source/"
SRC_DIR="/home/archives/source/"
##############################################################

source /usr/src/qbilinux/PackageBuild.def

do_prepare() {
    cd ${S[$i]}
    for patch in $patchfiles ; do
	patch -p1 < $W/$patch
    done
    autoreconf -f -i
}

do_config() {
    if [ -d ${B[$1]} ] ; then rm -rf ${B[$1]} ; fi

    cp -a ${S[$1]} ${B[$1]}
    cd ${B[$1]}
    if [ -f ./meson.build ] ; then
	export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
	export LDFLAGS='-Wl,--as-needed' 
	meson --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man ${OPT_CONFIG[$1]} ${S[$1]}
    fi
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
}

do_build() {
    cd ${B[$1]}
    if [ -f build.ninja ] ; then
	export LDFLAGS='-Wl,--as-needed'
	ninja
    fi
    if [ $? != 0 ]; then
	echo "make error. $0 script stop"
	exit 255
    fi
}

do_install() {
    cd ${B[$1]}
    if [ -f build.ninja ] ; then
	export LDFLAGS='-Wl,--as-needed'
	DESTDIR=$P ninja install
    fi
    if [ $? != 0 ]; then
	echo "make install error. $0 script stop"
	exit 255
    fi
}

do_package() {
    for i in $pkgbase ; do
        cd $P
        /sbin/makepkg $W/$pkg.$compress <<EOF
y
1
EOF
    done
}

source /usr/src/qbilinux/PackageBuild.func
