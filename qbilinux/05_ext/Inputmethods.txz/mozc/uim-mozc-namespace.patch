--- a/src/unix/uim/key_translator.cc
+++ b/src/unix/uim/key_translator.cc
@@ -368,26 +368,31 @@
 
 void KeyTranslator::Init() {
   for (int i = 0; i < arraysize(special_key_map); ++i) {
-    CHECK(special_key_map_.insert(make_pair(special_key_map[i].from,
-                                            special_key_map[i].to)).second);
+    CHECK(special_key_map_.insert(
+        std::make_pair(special_key_map[i].from,
+                       special_key_map[i].to)).second);
   }
   for (int i = 0; i < arraysize(modifier_key_map); ++i) {
-    CHECK(modifier_key_map_.insert(make_pair(modifier_key_map[i].from,
-                                             modifier_key_map[i].to)).second);
+    CHECK(modifier_key_map_.insert(
+        std::make_pair(modifier_key_map[i].from,
+                       modifier_key_map[i].to)).second);
   }
   for (int i = 0; i < arraysize(modifier_mask_map); ++i) {
-    CHECK(modifier_mask_map_.insert(make_pair(modifier_mask_map[i].from,
-                                              modifier_mask_map[i].to)).second);
+    CHECK(modifier_mask_map_.insert(
+        std::make_pair(modifier_mask_map[i].from,
+                       modifier_mask_map[i].to)).second);
   }
   for (int i = 0; i < arraysize(kana_map_jp); ++i) {
     CHECK(kana_map_jp_.insert(
-        make_pair(kana_map_jp[i].code, make_pair(
-            kana_map_jp[i].no_shift, kana_map_jp[i].shift))).second);
+        std::make_pair(kana_map_jp[i].code,
+                       std::make_pair(kana_map_jp[i].no_shift,    
+                                      kana_map_jp[i].shift))).second);
   }
   for (int i = 0; i < arraysize(kana_map_us); ++i) {
     CHECK(kana_map_us_.insert(
-        make_pair(kana_map_us[i].code, make_pair(
-            kana_map_us[i].no_shift, kana_map_us[i].shift))).second);
+        std::make_pair(kana_map_us[i].code,
+                       std::make_pair(kana_map_us[i].no_shift,
+                                      kana_map_us[i].shift))).second);
   }
 }
 
--- a/src/unix/uim/key_translator.h
+++ b/src/unix/uim/key_translator.h
@@ -62,8 +62,8 @@
 
  private:
   typedef hash_map<unsigned int, commands::KeyEvent::SpecialKey> SpecialKeyMap;
-  typedef map<unsigned int, commands::KeyEvent::ModifierKey> ModifierKeyMap;
-  typedef map<unsigned int, pair<string, string> > KanaMap;
+  typedef std::map<unsigned int, commands::KeyEvent::ModifierKey> ModifierKeyMap;
+  typedef std::map<unsigned int, std::pair<string, string> > KanaMap;
 
   // Returns true iff key is modifier key such as SHIFT, ALT, or CAPSLOCK.
   bool IsModifierKey(unsigned int keyval,
--- a/src/unix/uim/mozc.cc
+++ b/src/unix/uim/mozc.cc
@@ -905,7 +905,7 @@
   int i;
 
   for (i = 0; key_tab[i].key; i++)
-    key_map.insert(make_pair(key_tab[i].str, key_tab[i].key));
+    key_map.insert(std::make_pair(key_tab[i].str, key_tab[i].key));
 }
 
 static uim_lisp
